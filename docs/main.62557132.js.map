{"version":3,"sources":["../immerser.js","main.js"],"names":["Immerser","options","defaults","selectorImmerser","selectorLayer","selectorSolid","selectorPager","selectorMask","selectorMaskInner","selectorSynchroHover","classnameImmerser","classnameImmerserMask","classnameImmerserSolid","solidClassnameArray","defaultValue","description","validator","x","Array","isArray","length","fromViewportWidth","pagerTreshold","stylesInCSS","synchroHoverPagerLinks","updateHash","classnamePager","classnameValidator","classnamePagerLink","classnamePagerLinkActive","onInit","onActiveLayerChange","initState","init","statemap","immerserNode","pagerNode","immerserMaskNodeArray","originalChildrenNodeList","documentHeight","windowHeight","resizeTimerId","activeLayer","activeSynchroHoverId","synchroHoverNodeArray","mergeOptions","window","innerWidth","document","querySelector","initStatemap","setWindowSizes","setLayerSizes","setStatemap","initPager","createPagerLinks","initDOMStructure","initPagerLinks","initHoverSynchro","draw","addEventListener","bind","onResize","console","warn","key","hasOwnProperty","value","layerNodeList","querySelectorAll","forEachNode","layerNode","layerIndex","solidClassnames","dataset","immerserLayerConfig","JSON","parse","e","error","id","push","node","top","bottom","documentElement","offsetHeight","innerHeight","map","state","offsetTop","immerserHeight","immerserTop","index","isFirst","isLast","enter","startEnter","leave","startLeave","height","createObservable","undefined","nextIndex","drawPagerLinks","classList","add","forEach","layerId","pagerLinkNode","createElement","href","stateIndex","immerserSynchroHover","appendChild","pagerLinkNodeArray","maskStyles","position","right","left","overflow","bindClassOrStyle","pointerEvents","customMaskNodeList","isCustomMarkup","maskNode","maskInnerNode","childNode","clonnedChildNode","cloneNode","clonedSolidNodeList","clonedSolidNode","solidId","immerserSolid","setAttribute","removeChild","pagerLinkHTMLCollection","getElementsByClassName","synchroHoverNodeList","nextId","drawSynchroHover","synchroHoverNode","synchroHoverId","y","getLastScrollPositionY","progress","style","transform","pagerScrollActivePoint","parseInt","remove","currentState","nextHash","removeAttribute","location","hash","cancelAnimationFrame","requestAnimationFrame","immerserMaskNode","innerHTML","removeEventListener","Math","min","max","scrollTop","styles","rule","classname","applyStyles","nodeList","callback","string","test","initial","didSet","internal","next","my","immerser","log","activeIndex","highlighterNodeList","highlighterAnimationClassname","i","highlight","highlighterNode","targetSelector","highlighter","targetNodeList","j","targetNode","isHighlighting","timerId","setTimeout","clearTimeout","faceNodeList","faceNode","faceSpinning"],"mappings":";AAqeC,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,OAAA,KAAA,GAAA,mBAAA,OAAA,wBAAA,EAAA,EAAA,OAAA,OAAA,sBAAA,GAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,eAAA,EAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAreoBA,IAAAA,EAqepB,WApeaC,SAAAA,EAAAA,GAAS,EAAA,KAAA,GACdC,KAAAA,SAAW,CAEdC,iBAAkB,kBAClBC,cAAe,wBACfC,cAAe,wBACfC,cAAe,wBACfC,aAAc,uBACdC,kBAAmB,6BACnBC,qBAAsB,gCACtBC,kBAAmB,WACnBC,sBAAuB,iBACvBC,uBAAwB,kBAGxBC,oBAAqB,CACnBC,aAAc,GACdC,YAAa,6BACbC,UAAW,SAAAC,GAAKC,OAAAA,MAAMC,QAAQF,IAAmB,IAAbA,EAAEG,SAExCC,kBAAmB,CACjBP,aAAc,KACdC,YAAa,mBACbC,UAAW,SAAAC,GAAK,MAAa,iBAANA,GAAkB,GAAKA,GAAKA,EAAI,GAAM,IAE/DK,cAAe,CACbR,aAAc,GACdC,YAAa,2BACbC,UAAW,SAAAC,GAAK,MAAa,iBAANA,GAAkB,GAAKA,GAAKA,GAAK,IAE1DM,YAAa,CACXT,cAAc,EACdC,YAAa,UACbC,UAAW,SAAAC,GAAK,MAAa,kBAANA,IAEzBO,uBAAwB,CACtBV,cAAc,EACdC,YAAa,UACbC,UAAW,SAAAC,GAAK,MAAa,kBAANA,IAEzBQ,WAAY,CACVX,cAAc,EACdC,YAAa,UACbC,UAAW,SAAAC,GAAK,MAAa,kBAANA,IAEzBS,eAAgB,CACdZ,aAAc,QACdC,YAAa,mCACbC,UAAW,KAAKW,oBAElBC,mBAAoB,CAClBd,aAAc,cACdC,YAAa,mCACbC,UAAW,KAAKW,oBAElBE,yBAA0B,CACxBf,aAAc,sBACdC,YAAa,mCACbC,UAAW,KAAKW,oBAElBG,OAAQ,CACNhB,aAAc,KACdC,YAAa,WACbC,UAAW,SAAAC,GAAK,MAAa,mBAANA,IAEzBc,oBAAqB,CACnBjB,aAAc,KACdC,YAAa,WACbC,UAAW,SAAAC,GAAK,MAAa,mBAANA,KAItBe,KAAAA,YACAC,KAAAA,KAAKhC,GA2Zb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YAxZa,MAAA,WACLA,KAAAA,QAAU,GACViC,KAAAA,SAAW,GACXC,KAAAA,aAAe,KACfC,KAAAA,UAAY,KACZC,KAAAA,sBAAwB,GACxBC,KAAAA,yBAA2B,GAC3BC,KAAAA,eAAiB,EACjBC,KAAAA,aAAe,EACfC,KAAAA,cAAgB,KAChBC,KAAAA,YAAc,KACdC,KAAAA,qBAAuB,KACvBC,KAAAA,sBAAwB,KA4YhC,CAAA,IAAA,OAzYM3C,MAAAA,SAAAA,GACE4C,KAAAA,aAAa5C,GACd6C,OAAOC,WAAa,KAAK9C,QAAQoB,oBAIhCc,KAAAA,aAAea,SAASC,cAAc,KAAKhD,QAAQE,kBACnD,KAAKgC,cAKLe,KAAAA,eACAC,KAAAA,iBACAC,KAAAA,gBACAC,KAAAA,cACAC,KAAAA,YACAC,KAAAA,mBACAC,KAAAA,mBACAC,KAAAA,iBACAC,KAAAA,mBACAC,KAAAA,OAELb,OAAOc,iBAAiB,SAAU,KAAKD,KAAKE,KAAK,OAAO,GACxDf,OAAOc,iBAAiB,SAAU,KAAKE,SAASD,KAAK,OAAO,GAEzB,mBAAxB,KAAK5D,QAAQ6B,QACjB7B,KAAAA,QAAQ6B,OAAO,OAnBpBiC,QAAQC,KAAK,oGAiYlB,CAAA,IAAA,eA1W4B,MAAA,WAAd/D,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAChB,IAAA,IAAMgE,KAAO,KAAK/D,SACjB,GAAwC,mBAAjC,KAAKA,SAAS+D,GAAKjD,UACvBf,KAAAA,QAAQgE,GAAO,KAAK/D,SAAS+D,OAC7B,CAC4C,IAAA,EAAA,KAAK/D,SAAS+D,GAAvDnD,EAAAA,EAAAA,aAAcC,EAAAA,EAAAA,YAAaC,EAAAA,EAAAA,UAE/Bf,GADCA,KAAAA,QAAQgE,GAAOnD,EAChBb,EAAQiE,eAAeD,GAAM,CACzBE,IAAAA,EAAQlE,EAAQgE,GAClBjD,EAAUmD,GACPlE,KAAAA,QAAQgE,GAAOE,EAEpBJ,QAAQC,KACMC,YAAAA,OAAAA,EAAUlD,QAAAA,OAAAA,EAA4BoD,WAAAA,OAAAA,EAAAA,GAAUA,MAAAA,OAAAA,EAAoCrD,gCAAAA,OAAAA,EADlG,yEA8VX,CAAA,IAAA,eArVgB,MAAA,WAAA,IAAA,EAAA,KACPsD,EAAgBpB,SAASqB,iBAAiB,KAAKpE,QAAQG,eACxDkE,KAAAA,YAAYF,EAAe,SAACG,EAAWC,GACtCC,IAAAA,EAAkB,EAAKxE,QAAQY,oBAAoB2D,GACnDD,GAAAA,EAAUG,QAAQC,oBAChB,IACFF,EAAkBG,KAAKC,MAAMN,EAAUG,QAAQC,qBAC/C,MAAOG,GACPf,QAAQgB,MAAM,4CAA6CD,GAGzDE,IAAAA,EAAKT,EAAUS,IAA0BR,oBAAAA,OAAAA,GAC/C,EAAKtC,SAAS+C,KAAK,CACjBC,KAAMX,EACNS,GAAAA,EACAP,gBAAAA,EACAU,IAAK,EACLC,OAAQ,QAoUf,CAAA,IAAA,iBA/TkB,MAAA,WACV7C,KAAAA,eAAiBS,SAASqC,gBAAgBC,aAC1C9C,KAAAA,aAAeM,OAAOyC,cA6T9B,CAAA,IAAA,gBA1TiB,MAAA,WACTrD,KAAAA,SAAW,KAAKA,SAASsD,IAAI,SAAAC,GAC1BN,IAAAA,EAAMM,EAAMP,KAAKQ,UAGlBD,OAAAA,EAAAA,GAAAA,EADL,CAEEN,IAAAA,EACAC,OAJaD,EAAMM,EAAMP,KAAKI,mBAuTrC,CAAA,IAAA,cA9Se,MAAA,WAAA,IAAA,EAAA,KACNK,EAAiB,KAAKxD,aAAamD,aACnCM,EAAc,KAAKzD,aAAauD,UAEjCxD,KAAAA,SAAW,KAAKA,SAASsD,IAAI,SAACC,EAAOI,GAClCC,IAAAA,EAAoB,IAAVD,EACVE,EAASF,IAAU,EAAK3D,SAASd,OAAS,EAG1C4E,EAAQF,EAAU,EAAI,EAAK5D,SAAS2D,EAAQ,GAAGT,OAASQ,EACxDK,EAAaH,EAAU,EAAIE,EAAQL,EACnCO,EAAQH,EAAS,EAAKxD,eAAiB,EAAKL,SAAS2D,GAAOT,OAASQ,EAItEH,OAAAA,EAAAA,GAAAA,EADL,CAEEQ,WAAAA,EACAD,MAAAA,EACAG,WANiBJ,EAAS,EAAKxD,eAAiB2D,EAAQP,EAOxDO,MAAAA,EACAE,OAAQT,QA0Rf,CAAA,IAAA,YArRa,MAAA,WAAA,IAAA,EAAA,KACLvD,KAAAA,UAAYY,SAASC,cAAc,KAAKhD,QAAQK,eAChD,KAAK8B,YAELM,KAAAA,YAAc2D,OAAiBC,EAAW,SAAAC,GAC7C,EAAKC,eAAeD,GAChB,EAAKtG,QAAQwB,YACf,EAAKA,WAAW8E,GAE8B,mBAArC,EAAKtG,QAAQ8B,qBACtB,EAAK9B,QAAQ8B,oBAAoBwE,EAAW,QA2QnD,CAAA,IAAA,mBAtQoB,MAAA,WAAA,IAAA,EAAA,KACb,GAAC,KAAKnE,UAAN,CAE2C,IAAA,EAAA,KAAKnC,QAA5CyB,EAAAA,EAAAA,eAAgBE,EAAAA,EAAAA,mBACnBQ,KAAAA,UAAUqE,UAAUC,IAAIhF,GAExBQ,KAAAA,SAASyE,QAAQ,SAAClB,EAAOI,GACxBe,IAAAA,EAAUnB,EAAMP,KAAKF,GAGT,KAAZ4B,IACFA,EAA8Bf,oBAAAA,OAAAA,GAC9BJ,EAAMP,KAAKF,GAAK4B,GAGZC,IAAAA,EAAgB7D,SAAS8D,cAAc,KAC7CD,EAAcJ,UAAUC,IAAI9E,GAC5BiF,EAAcE,KAAWH,IAAAA,OAAAA,GAEzBC,EAAcnC,QAAQsC,WAAanB,EAG/B,EAAK5F,QAAQuB,yBACfqF,EAAcnC,QAAQuC,qBAAqCpB,cAAAA,OAAAA,IAG7D,EAAKzD,UAAU8E,YAAYL,GAE3BpB,EAAM0B,mBAAqB,QA0OhC,CAAA,IAAA,mBAtOoB,MAAA,WAAA,IAAA,EAAA,KACXC,EAAa,CACjBC,SAAU,WACVlC,IAAK,EACLmC,MAAO,EACPlC,OAAQ,EACRmC,KAAM,EACNC,SAAU,UAGiE,EAAA,KAAKvH,QAA1ES,EAAAA,EAAAA,kBAAmBC,EAAAA,EAAAA,sBAAuBC,EAAAA,EAAAA,uBAC7C0B,KAAAA,yBAA2B,KAAKH,aAAakC,iBAAiB,KAAKpE,QAAQI,eAC3EoH,KAAAA,iBAAiB,KAAKtF,aAAczB,EAAmB,CAAEgH,cAAe,SAEvEC,IAAAA,EAAqB,KAAKxF,aAAakC,iBAAiB,KAAKpE,QAAQM,cACrEqH,EAAiBD,EAAmBvG,SAAW,KAAKc,SAASd,OAC/DuG,EAAmBvG,OAAS,GAAKuG,EAAmBvG,SAAW,KAAKc,SAASd,QAE/E2C,QAAQC,KAAK,iGAGV9B,KAAAA,SAAW,KAAKA,SAASsD,IAAI,SAACC,EAAOuB,GAElCa,IAAAA,EAAWD,EAAiBD,EAAmBX,GAAchE,SAAS8D,cAAc,OAC1F,EAAKW,iBAAiBI,EAAUlH,EAAuByG,GACjDU,IAAAA,EAAgBF,EAClBC,EAAS5E,cAAc,EAAKhD,QAAQO,mBACpCwC,SAAS8D,cAAc,OAC3B,EAAKW,iBAAiBK,EAAenH,EAAuByG,GAG5D,EAAK9C,YAAY,EAAKhC,yBAA0B,SAAAyF,GACxCC,IAAAA,EAAmBD,EAAUE,WAAU,GAC7C,EAAKR,iBAAiBO,EAAkBpH,EAAwB,CAAE8G,cAAe,QACjFI,EAAcZ,YAAYc,KAItBE,IAAAA,EAAsBJ,EAAczD,iBAAiB,EAAKpE,QAAQI,eAkB5DoF,OAjBZ,EAAKnB,YAAY4D,EAAqB,SAAAC,GAC9BC,IAAAA,EAAUD,EAAgBzD,QAAQ2D,cACpC5C,EAAMhB,iBAAmBgB,EAAMhB,gBAAgBP,eAAekE,IAChED,EAAgB1B,UAAUC,IAAIjB,EAAMhB,gBAAgB2D,MAKrC,IAAfpB,GACFa,EAASS,aAAa,cAAe,QAGvCT,EAASX,YAAYY,GACrB,EAAK3F,aAAa+E,YAAYW,GAE9B,EAAKxF,sBAAsB4C,KAAK4C,GAEpBpC,EAAAA,GAAAA,EAAZ,CAAmBoC,SAAAA,EAAUC,cAAAA,MAI1BxD,KAAAA,YAAY,KAAKhC,yBAA0B,SAAAyF,GAC9C,EAAK5F,aAAaoG,YAAYR,OAyKnC,CAAA,IAAA,iBArKkB,MAAA,WACX,GAAC,KAAK3F,UAEL,IADCoG,IAAAA,EAA0B,KAAKrG,aAAasG,uBAAuB,KAAKxI,QAAQ2B,oBAC7EiE,EAAQ,EAAGA,EAAQ2C,EAAwBpH,OAAQyE,IAAS,CAC7DgB,IAAAA,EAAgB2B,EAAwB3C,GACxCmB,EAAaH,EAAcnC,QAAQsC,WACpC9E,KAAAA,SAAS8E,GAAYG,mBAAmBlC,KAAK4B,MA+JvD,CAAA,IAAA,mBA3JoB,MAAA,WAAA,IAAA,EAAA,KACX6B,EAAuB1F,SAASqB,iBAAiB,KAAKpE,QAAQQ,sBAC/DiI,EAAqBtH,SAErBuB,KAAAA,qBAAuB0D,OAAiBC,EAAW,SAAAqC,GACtD,EAAKC,iBAAiBD,KAGnBrE,KAAAA,YAAYoE,EAAsB,SAAAG,GAC/BC,IAAAA,EAAiBD,EAAiBnE,QAAQuC,qBAEhD4B,EAAiBjF,iBAAiB,YAAa,WAC7C,EAAKjB,qBAAqBwB,MAAQ2E,IAGpCD,EAAiBjF,iBAAiB,WAAY,WAC5C,EAAKjB,qBAAqBwB,WAAQmC,IAGpC,EAAK1D,sBAAsBqC,KAAK4D,QAwIrC,CAAA,IAAA,OApIQ,MAAA,WAAA,IAAA,EAAA,KACCE,EAAI,KAAKC,yBACV9G,KAAAA,SAASyE,QACZ,SAAyFd,EAAAA,GAAtFI,IACGgD,EADHhD,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,MAAOG,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,MAAOE,EAAAA,EAAAA,OAAQyB,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,cAAe3C,EAAAA,EAAAA,IAAKC,EAAAA,EAAAA,OAgBzE,GAbAa,EAAa8C,IAAGE,EAAW7C,GAE3BH,GAAc8C,GAAKA,EAAI/C,IAAOiD,EAAWjD,EAAQ+C,GAEjD/C,GAAS+C,GAAKA,EAAI5C,IAAY8C,EAAW,GAEzC9C,GAAc4C,GAAKA,EAAI7C,IAAO+C,EAAW9C,EAAa4C,GAEtDA,GAAK7C,IAAO+C,GAAY7C,GAE5ByB,EAASqB,MAAMC,UAA0BF,cAAAA,OAAAA,EAAzC,OACAnB,EAAcoB,MAAMC,UAA0B,cAAA,QAACF,EAA/C,OAEI,EAAK7G,UAAW,CACZgH,IAAAA,EAAyBL,EAAI,EAAKvG,cAAgB,EAAI,EAAKvC,QAAQqB,eACrE6D,GAAOiE,GAA0BA,EAAyBhE,IAC5D,EAAK1C,YAAYyB,MAAQ0B,QA8GpC,CAAA,IAAA,iBAvGkB,MAAA,WAAA,IAAA,EAAA,KACV3D,KAAAA,SAASyE,QAAQ,SAA4B,GAAzBQ,EAAAA,mBACJR,QAAQ,SAAAE,GACrBwC,SAASxC,EAAcnC,QAAQsC,WAAY,MAAQ,EAAKtE,YAAYyB,MACtE0C,EAAcJ,UAAUC,IAAI,EAAKzG,QAAQ4B,0BAEzCgF,EAAcJ,UAAU6C,OAAO,EAAKrJ,QAAQ4B,gCAiGrD,CAAA,IAAA,mBA3FkBiH,MAAAA,SAAAA,GACVlG,KAAAA,sBAAsB+D,QAAQ,SAAAkC,GAC7BA,EAAiBnE,QAAQuC,uBAAyB6B,EACpDD,EAAiBpC,UAAUC,IAAI,UAE/BmC,EAAiBpC,UAAU6C,OAAO,cAsFzC,CAAA,IAAA,aAjFYtC,MAAAA,SAAAA,GACHuC,IAAAA,EAAe,KAAKrH,SAAS8E,GAC7BwC,EAAWD,EAAavE,GAE9BuE,EAAarE,KAAKuE,gBAAgB,MAClC3G,OAAO4G,SAASC,KAAOH,EACvBD,EAAarE,KAAKoD,aAAa,KAAMkB,KA2ExC,CAAA,IAAA,WAxEY,MAAA,WAAA,IAAA,EAAA,KACL,KAAK/G,eAAeK,OAAO8G,qBAAqB,KAAKnH,eACpDA,KAAAA,cAAgBK,OAAO+G,sBAAsB,WAChD,EAAK1G,iBACL,EAAKC,gBACL,EAAKC,cACL,EAAKM,WAkEV,CAAA,IAAA,UA9DW,MAAA,WAAA,IAAA,EAAA,KACHW,KAAAA,YAAY,KAAKhC,yBAA0B,SAAAyF,GAC9C,EAAK5F,aAAa+E,YAAYa,KAG3B1F,KAAAA,sBAAsBsE,QAAQ,SAAAmD,GACjC,EAAK3H,aAAaoG,YAAYuB,KAG3B1H,KAAAA,UAAU2H,UAAY,GAEtB/H,KAAAA,YAELc,OAAOkH,oBAAoB,SAAU,KAAKrG,MAAM,GAChDb,OAAOkH,oBAAoB,SAAU,KAAKlG,UAAU,KAgDvD,CAAA,IAAA,yBA5C0B,MAAA,WAEhBmG,OAAAA,KAAKC,IAAID,KAAKE,IAAInH,SAASqC,gBAAgB+E,UAAW,GAAI,KAAK7H,kBA0CzE,CAAA,IAAA,cAvCwB8H,MAAAA,SAAAA,EAAAA,GAATnB,IAAAA,EAAAA,EAAAA,MACP,IAAA,IAAMoB,KAAQD,EACjBnB,EAAMoB,GAAQD,EAAOC,KAqC1B,CAAA,IAAA,mBAjCkBpF,MAAAA,SAAAA,EAAMqF,EAAWF,GAC5B,KAAKpK,QAAQsB,YACf2D,EAAKuB,UAAUC,IAAI6D,GAEdC,KAAAA,YAAYtF,EAAMmF,KA6B5B,CAAA,IAAA,cAzBaI,MAAAA,SAAAA,EAAUC,GACf,IAAA,IAAI7E,EAAQ,EAAGA,EAAQ4E,EAASrJ,OAAQyE,IAAS,CAEpD6E,EADaD,EAAS5E,GACPA,EAAO4E,MAsB3B,CAAA,IAAA,qBAlBoBE,MAAAA,SAAAA,GACV,MAAkB,iBAAXA,GAAkC,KAAXA,GAAiB,uBAAuBC,KAAKD,OAiBrF,EAAA,GAbD,SAAStE,EAAiBwE,EAASC,GAC1B,MAAA,CACLC,SAAUF,EACN1G,YACK,OAAA,KAAK4G,UAEV5G,UAAM6G,GACJA,IAAS,KAAKD,WACXA,KAAAA,SAAWC,EAChBF,EAAO,KAAKC,aAInB,QAAA,QAAA;;;;AC9aA,aAvDD,IAAA,EAAA,EAAA,QAAA,mBAuDC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAtDD,QAAA,iBACA,QAAA,oBAkBA,IAfA,IAAME,EAAK,IAAIjL,EAAJ,QAAa,CACtBuB,aAAa,EACbC,wBAAwB,EACxBC,YAAY,EACZK,OAAOoJ,SAAAA,GACLnH,QAAQoH,IAAID,IAEdnJ,oBAAoBqJ,SAAAA,EAAaF,GAC/BnH,QAAQoH,IAAIC,EAAaF,MAIvBG,EAAsBrI,SAASqB,iBAAiB,sBAChDiH,EAAgC,+BAE7BC,EAAI,EAAGA,EAAIF,EAAoBjK,OAAQmK,IAAK,CAI1CC,IAAAA,EAAT,SAAmBC,GACV,OAAA,WAGA,IAFCC,IAAAA,EAAiBD,EAAgB/G,QAAQiH,YACzCC,EAAiB5I,SAASqB,iBAAiBqH,GACxCG,EAAAA,SAAAA,GACDC,IAAAA,EAAaF,EAAeC,GAC9B,IAACC,EAAWC,eAAgB,CAC9BD,EAAWC,gBAAiB,EAC5BD,EAAWrF,UAAUC,IAAI4E,GACnBU,IAAAA,EAAUC,WAAW,WACzBH,EAAWrF,UAAU6C,OAAOgC,GAC5BY,aAAaF,GACbF,EAAWC,gBAAiB,GAC3B,QATEF,EAAI,EAAGA,EAAID,EAAexK,OAAQyK,IAAlCA,EAAAA,KAPPJ,EAAkBJ,EAAoBE,GAC5CE,EAAgB7H,iBAAiB,YAAa4H,EAAUC,IACxDA,EAAgB7H,iBAAiB,QAAS4H,EAAUC,IAsBtD,IADA,IAAMU,EAAenJ,SAASqB,iBAAiB,wBACtCkH,EAAAA,SAAAA,GACDa,IAAAA,EAAWD,EAAaZ,GAC9Ba,EAASxI,iBAAiB,QAAS,WACK,UAAlCwI,EAAS1H,QAAQ2H,eACnBD,EAAS1H,QAAQ2H,aAAe,OAChCJ,WAAW,WACTG,EAAS1H,QAAQ2H,aAAe,SAC/B,SAPAd,EAAI,EAAGA,EAAIY,EAAa/K,OAAQmK,IAAhCA,EAAAA","file":"main.62557132.js","sourceRoot":"..\\example","sourcesContent":["export default class Immerser {\r\n  constructor(options) {\r\n    this.defaults = {\r\n      // not redefineable defaults\r\n      selectorImmerser: '[data-immerser]',\r\n      selectorLayer: '[data-immerser-layer]',\r\n      selectorSolid: '[data-immerser-solid]',\r\n      selectorPager: '[data-immerser-pager]',\r\n      selectorMask: '[data-immerser-mask]',\r\n      selectorMaskInner: '[data-immerser-mask-inner]',\r\n      selectorSynchroHover: '[data-immerser-synchro-hover]',\r\n      classnameImmerser: 'immerser',\r\n      classnameImmerserMask: 'immerser__mask',\r\n      classnameImmerserSolid: 'immerser__solid',\r\n\r\n      // redefineable defaults\r\n      solidClassnameArray: {\r\n        defaultValue: [],\r\n        description: 'non empty array of objects',\r\n        validator: x => Array.isArray(x) && x.length !== 0,\r\n      },\r\n      fromViewportWidth: {\r\n        defaultValue: 1024,\r\n        description: 'a natural number',\r\n        validator: x => typeof x === 'number' && 0 <= x && x % 1 === 0,\r\n      },\r\n      pagerTreshold: {\r\n        defaultValue: 0.5,\r\n        description: 'a number between 0 and 1',\r\n        validator: x => typeof x === 'number' && 0 <= x && x <= 1,\r\n      },\r\n      stylesInCSS: {\r\n        defaultValue: false,\r\n        description: 'boolean',\r\n        validator: x => typeof x === 'boolean',\r\n      },\r\n      synchroHoverPagerLinks: {\r\n        defaultValue: false,\r\n        description: 'boolean',\r\n        validator: x => typeof x === 'boolean',\r\n      },\r\n      updateHash: {\r\n        defaultValue: false,\r\n        description: 'boolean',\r\n        validator: x => typeof x === 'boolean',\r\n      },\r\n      classnamePager: {\r\n        defaultValue: 'pager',\r\n        description: 'valid non empty classname string',\r\n        validator: this.classnameValidator,\r\n      },\r\n      classnamePagerLink: {\r\n        defaultValue: 'pager__link',\r\n        description: 'valid non empty classname string',\r\n        validator: this.classnameValidator,\r\n      },\r\n      classnamePagerLinkActive: {\r\n        defaultValue: 'pager__link--active',\r\n        description: 'valid non empty classname string',\r\n        validator: this.classnameValidator,\r\n      },\r\n      onInit: {\r\n        defaultValue: null,\r\n        description: 'function',\r\n        validator: x => typeof x === 'function',\r\n      },\r\n      onActiveLayerChange: {\r\n        defaultValue: null,\r\n        description: 'function',\r\n        validator: x => typeof x === 'function',\r\n      },\r\n    };\r\n\r\n    this.initState();\r\n    this.init(options);\r\n  }\r\n\r\n  initState() {\r\n    this.options = {};\r\n    this.statemap = [];\r\n    this.immerserNode = null;\r\n    this.pagerNode = null;\r\n    this.immerserMaskNodeArray = [];\r\n    this.originalChildrenNodeList = [];\r\n    this.documentHeight = 0;\r\n    this.windowHeight = 0;\r\n    this.resizeTimerId = null;\r\n    this.activeLayer = null;\r\n    this.activeSynchroHoverId = null;\r\n    this.synchroHoverNodeArray = [];\r\n  }\r\n\r\n  init(options) {\r\n    this.mergeOptions(options);\r\n    if (window.innerWidth < this.options.fromViewportWidth) {\r\n      return;\r\n    }\r\n\r\n    this.immerserNode = document.querySelector(this.options.selectorImmerser);\r\n    if (!this.immerserNode) {\r\n      console.warn('Immerser element not found. Check documentation https://github.com/dubaua/immerser#how-to-use');\r\n      return;\r\n    }\r\n\r\n    this.initStatemap();\r\n    this.setWindowSizes();\r\n    this.setLayerSizes();\r\n    this.setStatemap();\r\n    this.initPager();\r\n    this.createPagerLinks();\r\n    this.initDOMStructure();\r\n    this.initPagerLinks();\r\n    this.initHoverSynchro();\r\n    this.draw();\r\n\r\n    window.addEventListener('scroll', this.draw.bind(this), false);\r\n    window.addEventListener('resize', this.onResize.bind(this), false);\r\n\r\n    if (typeof this.options.onInit === 'function') {\r\n      this.options.onInit(this);\r\n    }\r\n  }\r\n\r\n  mergeOptions(options = {}) {\r\n    for (const key in this.defaults) {\r\n      if (typeof this.defaults[key].validator !== 'function') {\r\n        this.options[key] = this.defaults[key];\r\n      } else {\r\n        const { defaultValue, description, validator } = this.defaults[key];\r\n        this.options[key] = defaultValue;\r\n        if (options.hasOwnProperty(key)) {\r\n          const value = options[key];\r\n          if (validator(value)) {\r\n            this.options[key] = value;\r\n          } else {\r\n            console.warn(\r\n              `Expected ${key} is ${description}, got <${typeof value}> ${value}. Fallback to default value ${defaultValue}. Check documentation https://github.com/dubaua/immerser#options`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  initStatemap() {\r\n    const layerNodeList = document.querySelectorAll(this.options.selectorLayer);\r\n    this.forEachNode(layerNodeList, (layerNode, layerIndex) => {\r\n      let solidClassnames = this.options.solidClassnameArray[layerIndex];\r\n      if (layerNode.dataset.immerserLayerConfig) {\r\n        try {\r\n          solidClassnames = JSON.parse(layerNode.dataset.immerserLayerConfig);\r\n        } catch (e) {\r\n          console.error('Failed to parse JSON class configuration.', e);\r\n        }\r\n      }\r\n      const id = layerNode.id || `immerser-section-${layerIndex}`;\r\n      this.statemap.push({\r\n        node: layerNode,\r\n        id,\r\n        solidClassnames,\r\n        top: 0,\r\n        bottom: 0,\r\n      });\r\n    });\r\n  }\r\n\r\n  setWindowSizes() {\r\n    this.documentHeight = document.documentElement.offsetHeight;\r\n    this.windowHeight = window.innerHeight;\r\n  }\r\n\r\n  setLayerSizes() {\r\n    this.statemap = this.statemap.map(state => {\r\n      const top = state.node.offsetTop;\r\n      const bottom = top + state.node.offsetHeight;\r\n      return {\r\n        ...state,\r\n        top,\r\n        bottom,\r\n      };\r\n    });\r\n  }\r\n\r\n  setStatemap() {\r\n    const immerserHeight = this.immerserNode.offsetHeight;\r\n    const immerserTop = this.immerserNode.offsetTop;\r\n\r\n    this.statemap = this.statemap.map((state, index) => {\r\n      const isFirst = index === 0;\r\n      const isLast = index === this.statemap.length - 1;\r\n\r\n      // actually not 0 and this.documentHeight but start of first and end of last.\r\n      const enter = isFirst ? 0 : this.statemap[index - 1].bottom - immerserTop;\r\n      const startEnter = isFirst ? 0 : enter - immerserHeight;\r\n      const leave = isLast ? this.documentHeight : this.statemap[index].bottom - immerserTop;\r\n      const startLeave = isLast ? this.documentHeight : leave - immerserHeight;\r\n\r\n      return {\r\n        ...state,\r\n        startEnter,\r\n        enter,\r\n        startLeave,\r\n        leave,\r\n        height: immerserHeight,\r\n      };\r\n    });\r\n  }\r\n\r\n  initPager() {\r\n    this.pagerNode = document.querySelector(this.options.selectorPager);\r\n    if (!this.pagerNode) return;\r\n\r\n    this.activeLayer = createObservable(undefined, nextIndex => {\r\n      this.drawPagerLinks(nextIndex);\r\n      if (this.options.updateHash) {\r\n        this.updateHash(nextIndex);\r\n      }\r\n      if (typeof this.options.onActiveLayerChange === 'function') {\r\n        this.options.onActiveLayerChange(nextIndex, this);\r\n      }\r\n    });\r\n  }\r\n\r\n  createPagerLinks() {\r\n    if (!this.pagerNode) return;\r\n\r\n    const { classnamePager, classnamePagerLink } = this.options;\r\n    this.pagerNode.classList.add(classnamePager);\r\n\r\n    this.statemap.forEach((state, index) => {\r\n      let layerId = state.node.id;\r\n\r\n      // if no layerId create it, to point anchor to\r\n      if (layerId === '') {\r\n        layerId = `immerser-section-${index}`;\r\n        state.node.id = layerId;\r\n      }\r\n\r\n      const pagerLinkNode = document.createElement('a');\r\n      pagerLinkNode.classList.add(classnamePagerLink);\r\n      pagerLinkNode.href = `#${layerId}`;\r\n      // not the best way to store index for\r\n      pagerLinkNode.dataset.stateIndex = index;\r\n\r\n      // if passed synchronize pager link hover bind attribute\r\n      if (this.options.synchroHoverPagerLinks) {\r\n        pagerLinkNode.dataset.immerserSynchroHover = `pager-link-${index}`;\r\n      }\r\n\r\n      this.pagerNode.appendChild(pagerLinkNode);\r\n\r\n      state.pagerLinkNodeArray = [];\r\n    });\r\n  }\r\n\r\n  initDOMStructure() {\r\n    const maskStyles = {\r\n      position: 'absolute',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      overflow: 'hidden',\r\n    };\r\n\r\n    const { classnameImmerser, classnameImmerserMask, classnameImmerserSolid } = this.options;\r\n    this.originalChildrenNodeList = this.immerserNode.querySelectorAll(this.options.selectorSolid);\r\n    this.bindClassOrStyle(this.immerserNode, classnameImmerser, { pointerEvents: 'none' });\r\n\r\n    const customMaskNodeList = this.immerserNode.querySelectorAll(this.options.selectorMask);\r\n    const isCustomMarkup = customMaskNodeList.length === this.statemap.length;\r\n    if (customMaskNodeList.length > 0 && customMaskNodeList.length !== this.statemap.length) {\r\n      // further possible to explicitly pass mask index\r\n      console.warn(\"You're trying use custom markup, but count of your immerser masks doesn't equal layers count.\");\r\n    }\r\n\r\n    this.statemap = this.statemap.map((state, stateIndex) => {\r\n      // create or assign existing markup, bind styles or classes\r\n      const maskNode = isCustomMarkup ? customMaskNodeList[stateIndex] : document.createElement('div');\r\n      this.bindClassOrStyle(maskNode, classnameImmerserMask, maskStyles);\r\n      const maskInnerNode = isCustomMarkup\r\n        ? maskNode.querySelector(this.options.selectorMaskInner)\r\n        : document.createElement('div');\r\n      this.bindClassOrStyle(maskInnerNode, classnameImmerserMask, maskStyles);\r\n\r\n      // clone solids to innerMask\r\n      this.forEachNode(this.originalChildrenNodeList, childNode => {\r\n        const clonnedChildNode = childNode.cloneNode(true);\r\n        this.bindClassOrStyle(clonnedChildNode, classnameImmerserSolid, { pointerEvents: 'all' });\r\n        maskInnerNode.appendChild(clonnedChildNode);\r\n      });\r\n\r\n      // assing class modifiers to clonned solids\r\n      const clonedSolidNodeList = maskInnerNode.querySelectorAll(this.options.selectorSolid);\r\n      this.forEachNode(clonedSolidNodeList, clonedSolidNode => {\r\n        const solidId = clonedSolidNode.dataset.immerserSolid;\r\n        if (state.solidClassnames && state.solidClassnames.hasOwnProperty(solidId)) {\r\n          clonedSolidNode.classList.add(state.solidClassnames[solidId]);\r\n        }\r\n      });\r\n\r\n      // a11y\r\n      if (stateIndex !== 0) {\r\n        maskNode.setAttribute('aria-hidden', 'true');\r\n      }\r\n\r\n      maskNode.appendChild(maskInnerNode);\r\n      this.immerserNode.appendChild(maskNode);\r\n\r\n      this.immerserMaskNodeArray.push(maskNode);\r\n\r\n      return { ...state, maskNode, maskInnerNode };\r\n    });\r\n\r\n    // remove original solid nodes\r\n    this.forEachNode(this.originalChildrenNodeList, childNode => {\r\n      this.immerserNode.removeChild(childNode);\r\n    });\r\n  }\r\n\r\n  initPagerLinks() {\r\n    if (!this.pagerNode) return;\r\n    const pagerLinkHTMLCollection = this.immerserNode.getElementsByClassName(this.options.classnamePagerLink);\r\n    for (let index = 0; index < pagerLinkHTMLCollection.length; index++) {\r\n      const pagerLinkNode = pagerLinkHTMLCollection[index];\r\n      const stateIndex = pagerLinkNode.dataset.stateIndex;\r\n      this.statemap[stateIndex].pagerLinkNodeArray.push(pagerLinkNode);\r\n    }\r\n  }\r\n\r\n  initHoverSynchro() {\r\n    const synchroHoverNodeList = document.querySelectorAll(this.options.selectorSynchroHover);\r\n    if (!synchroHoverNodeList.length) return;\r\n\r\n    this.activeSynchroHoverId = createObservable(undefined, nextId => {\r\n      this.drawSynchroHover(nextId);\r\n    });\r\n\r\n    this.forEachNode(synchroHoverNodeList, synchroHoverNode => {\r\n      const synchroHoverId = synchroHoverNode.dataset.immerserSynchroHover;\r\n\r\n      synchroHoverNode.addEventListener('mouseover', () => {\r\n        this.activeSynchroHoverId.value = synchroHoverId;\r\n      });\r\n\r\n      synchroHoverNode.addEventListener('mouseout', () => {\r\n        this.activeSynchroHoverId.value = undefined;\r\n      });\r\n\r\n      this.synchroHoverNodeArray.push(synchroHoverNode);\r\n    });\r\n  }\r\n\r\n  draw() {\r\n    const y = this.getLastScrollPositionY();\r\n    this.statemap.forEach(\r\n      ({ startEnter, enter, startLeave, leave, height, maskNode, maskInnerNode, top, bottom }, index) => {\r\n        let progress;\r\n\r\n        if (startEnter > y) progress = height;\r\n\r\n        if (startEnter <= y && y < enter) progress = enter - y;\r\n\r\n        if (enter <= y && y < startLeave) progress = 0;\r\n\r\n        if (startLeave <= y && y < leave) progress = startLeave - y;\r\n\r\n        if (y >= leave) progress = -height;\r\n\r\n        maskNode.style.transform = `translateY(${progress}px)`;\r\n        maskInnerNode.style.transform = `translateY(${-progress}px)`;\r\n\r\n        if (this.pagerNode) {\r\n          const pagerScrollActivePoint = y + this.windowHeight * (1 - this.options.pagerTreshold);\r\n          if (top <= pagerScrollActivePoint && pagerScrollActivePoint < bottom) {\r\n            this.activeLayer.value = index;\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  drawPagerLinks() {\r\n    this.statemap.forEach(({ pagerLinkNodeArray }) => {\r\n      pagerLinkNodeArray.forEach(pagerLinkNode => {\r\n        if (parseInt(pagerLinkNode.dataset.stateIndex, 10) === this.activeLayer.value) {\r\n          pagerLinkNode.classList.add(this.options.classnamePagerLinkActive);\r\n        } else {\r\n          pagerLinkNode.classList.remove(this.options.classnamePagerLinkActive);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  drawSynchroHover(synchroHoverId) {\r\n    this.synchroHoverNodeArray.forEach(synchroHoverNode => {\r\n      if (synchroHoverNode.dataset.immerserSynchroHover === synchroHoverId) {\r\n        synchroHoverNode.classList.add('_hover');\r\n      } else {\r\n        synchroHoverNode.classList.remove('_hover');\r\n      }\r\n    });\r\n  }\r\n\r\n  updateHash(stateIndex) {\r\n    const currentState = this.statemap[stateIndex];\r\n    const nextHash = currentState.id;\r\n    // this prevent move to anchor\r\n    currentState.node.removeAttribute('id');\r\n    window.location.hash = nextHash;\r\n    currentState.node.setAttribute('id', nextHash);\r\n  }\r\n\r\n  onResize() {\r\n    if (this.resizeTimerId) window.cancelAnimationFrame(this.resizeTimerId);\r\n    this.resizeTimerId = window.requestAnimationFrame(() => {\r\n      this.setWindowSizes();\r\n      this.setLayerSizes();\r\n      this.setStatemap();\r\n      this.draw();\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.forEachNode(this.originalChildrenNodeList, childNode => {\r\n      this.immerserNode.appendChild(childNode);\r\n    });\r\n\r\n    this.immerserMaskNodeArray.forEach(immerserMaskNode => {\r\n      this.immerserNode.removeChild(immerserMaskNode);\r\n    });\r\n\r\n    this.pagerNode.innerHTML = '';\r\n\r\n    this.initState();\r\n\r\n    window.removeEventListener('scroll', this.draw, false);\r\n    window.removeEventListener('resize', this.onResize, false);\r\n  }\r\n\r\n  // utils\r\n  getLastScrollPositionY() {\r\n    // limit scroll position between 0 and document height in case of iOS overflow scroll\r\n    return Math.min(Math.max(document.documentElement.scrollTop, 0), this.documentHeight);\r\n  }\r\n\r\n  applyStyles({ style }, styles) {\r\n    for (const rule in styles) {\r\n      style[rule] = styles[rule];\r\n    }\r\n  }\r\n\r\n  bindClassOrStyle(node, classname, styles) {\r\n    if (this.options.stylesInCSS) {\r\n      node.classList.add(classname);\r\n    } else {\r\n      this.applyStyles(node, styles);\r\n    }\r\n  }\r\n\r\n  forEachNode(nodeList, callback) {\r\n    for (let index = 0; index < nodeList.length; index++) {\r\n      const node = nodeList[index];\r\n      callback(node, index, nodeList);\r\n    }\r\n  }\r\n\r\n  classnameValidator(string) {\r\n    return typeof string === 'string' && string !== '' && /^[a-z_-][a-z\\d_-]*$/i.test(string);\r\n  }\r\n}\r\n\r\nfunction createObservable(initial, didSet) {\r\n  return {\r\n    internal: initial,\r\n    get value() {\r\n      return this.internal;\r\n    },\r\n    set value(next) {\r\n      if (next !== this.internal) {\r\n        this.internal = next;\r\n        didSet(this.internal);\r\n      }\r\n    },\r\n  };\r\n}\r\n","import Immerser from '../immerser.js';\nimport 'normalize.css';\nimport '../immerser.scss';\n// import Prism from 'prismjs';\n\nconst my = new Immerser({\n  stylesInCSS: true,\n  synchroHoverPagerLinks: true,\n  updateHash: true,\n  onInit(immerser) {\n    console.log(immerser);\n  },\n  onActiveLayerChange(activeIndex, immerser) {\n    console.log(activeIndex, immerser);\n  },\n});\n\nconst highlighterNodeList = document.querySelectorAll('[data-highlighter]');\nconst highlighterAnimationClassname = 'highlighter-animation-active';\n\nfor (let i = 0; i < highlighterNodeList.length; i++) {\n  const highlighterNode = highlighterNodeList[i];\n  highlighterNode.addEventListener('mouseover', highlight(highlighterNode));\n  highlighterNode.addEventListener('click', highlight(highlighterNode));\n  function highlight(highlighterNode) {\n    return function() {\n      const targetSelector = highlighterNode.dataset.highlighter;\n      const targetNodeList = document.querySelectorAll(targetSelector);\n      for (let j = 0; j < targetNodeList.length; j++) {\n        const targetNode = targetNodeList[j];\n        if (!targetNode.isHighlighting) {\n          targetNode.isHighlighting = true;\n          targetNode.classList.add(highlighterAnimationClassname);\n          const timerId = setTimeout(() => {\n            targetNode.classList.remove(highlighterAnimationClassname);\n            clearTimeout(timerId);\n            targetNode.isHighlighting = false;\n          }, 1500);\n        }\n      }\n    };\n  }\n}\n\nconst faceNodeList = document.querySelectorAll('[data-face-spinning]');\nfor (let i = 0; i < faceNodeList.length; i++) {\n  const faceNode = faceNodeList[i];\n  faceNode.addEventListener('click', function() {\n    if (faceNode.dataset.faceSpinning === 'false') {\n      faceNode.dataset.faceSpinning = 'true';\n      setTimeout(() => {\n        faceNode.dataset.faceSpinning = 'false';\n      }, 620);\n    }\n  });\n}\n"]}