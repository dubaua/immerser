{"version":3,"file":"immerser.min.umd.js","sources":["../src/defaults.js","../src/utils.js","../src/immerser.js"],"sourcesContent":["const CLASSNAME_REGEX = /^[a-z_-][a-z\\d_-]*$/i;\r\n\r\nfunction classnameValidator(string) {\r\n  return typeof string === 'string' && string !== '' && CLASSNAME_REGEX.test(string);\r\n}\r\n\r\nexport default {\r\n  // not redefineable defaults\r\n  _selectorImmerser: '[data-immerser]',\r\n  _selectorLayer: '[data-immerser-layer]',\r\n  _selectorSolid: '[data-immerser-solid]',\r\n  _selectorPager: '[data-immerser-pager]',\r\n  _selectorPagerLink: '[data-immerser-state-index]',\r\n  _selectorMask: '[data-immerser-mask]',\r\n  _selectorMaskInner: '[data-immerser-mask-inner]',\r\n  _selectorSynchroHover: '[data-immerser-synchro-hover]',\r\n\r\n  // redefineable defaults\r\n  solidClassnameArray: {\r\n    defaultValue: [],\r\n    description: 'non empty array of objects',\r\n    validator: x => Array.isArray(x) && x.length !== 0,\r\n  },\r\n  fromViewportWidth: {\r\n    defaultValue: 1024,\r\n    description: 'a natural number',\r\n    validator: x => typeof x === 'number' && 0 <= x && x % 1 === 0,\r\n  },\r\n  pagerTreshold: {\r\n    defaultValue: 0.5,\r\n    description: 'a number between 0 and 1',\r\n    validator: x => typeof x === 'number' && 0 <= x && x <= 1,\r\n  },\r\n  hasToUpdateHash: {\r\n    defaultValue: false,\r\n    description: 'boolean',\r\n    validator: x => typeof x === 'boolean',\r\n  },\r\n  classnamePager: {\r\n    defaultValue: 'pager',\r\n    description: 'valid non empty classname string',\r\n    validator: classnameValidator,\r\n  },\r\n  classnamePagerLink: {\r\n    defaultValue: 'pager__link',\r\n    description: 'valid non empty classname string',\r\n    validator: classnameValidator,\r\n  },\r\n  classnamePagerLinkActive: {\r\n    defaultValue: 'pager__link--active',\r\n    description: 'valid non empty classname string',\r\n    validator: classnameValidator,\r\n  },\r\n  onInit: {\r\n    defaultValue: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onBind: {\r\n    defaultValue: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onUnbind: {\r\n    defaultValue: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onDestroy: {\r\n    defaultValue: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onActiveLayerChange: {\r\n    defaultValue: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n};\r\n","export function bindStyles(node, styles) {\r\n  for (const rule in styles) {\r\n    node.style[rule] = styles[rule];\r\n  }\r\n}\r\n\r\nexport function forEachNode(nodeList, callback) {\r\n  for (let index = 0; index < nodeList.length; index++) {\r\n    const node = nodeList[index];\r\n    callback(node, index, nodeList);\r\n  }\r\n}\r\n\r\nexport function getLastScrollPositionY() {\r\n  const scrollY = window.scrollY || document.documentElement.scrollTop;\r\n  // limit scroll position between 0 and document height in case of iOS overflow scroll\r\n  return Math.min(Math.max(scrollY, 0), document.documentElement.offsetHeight);\r\n}\r\n\r\nexport function createObservable(didSet, initial) {\r\n  return {\r\n    internal: initial,\r\n    callbacks: typeof didSet === 'function' ? [didSet] : [],\r\n    get onChange() {\r\n      return this.callbacks;\r\n    },\r\n    set onChange(didSet) {\r\n      if (typeof didSet === 'function') {\r\n        this.callbacks.push(didSet);\r\n      }\r\n    },\r\n    get value() {\r\n      return this.internal;\r\n    },\r\n    set value(next) {\r\n      if (next !== this.internal) {\r\n        this.internal = next;\r\n        for (let i = 0; i < this.callbacks.length; i++) {\r\n          this.callbacks[i](this.internal);\r\n        }\r\n      }\r\n    },\r\n  };\r\n}\r\n","import defaults from './defaults.js';\r\nimport * as utils from './utils.js';\r\n\r\nexport default class Immerser {\r\n  constructor(options) {\r\n    this.defaults = defaults;\r\n    this.initState();\r\n    this.init(options);\r\n  }\r\n\r\n  initState() {\r\n    this.options = {};\r\n    this.statemap = [];\r\n    this.isBound = false;\r\n    this.isCustomMarkup = false;\r\n    this.immerserNode = null;\r\n    this.pagerNode = null;\r\n    this.originalChildrenNodeList = null;\r\n    this.immerserMaskNodeArray = [];\r\n    this.synchroHoverNodeArray = [];\r\n    this.documentHeight = 0;\r\n    this.windowHeight = 0;\r\n    this.immerserTop = 0;\r\n    this.immerserHeight = 0;\r\n    this.resizeTimerId = null;\r\n    this.reactiveSynchroHoverId = utils.createObservable();\r\n    this.reactiveActiveLayer = utils.createObservable();\r\n    this.reactiveWindowWidth = utils.createObservable();\r\n    this.onResize = null;\r\n    this.onScroll = null;\r\n  }\r\n\r\n  init(options) {\r\n    this.mergeOptions(options);\r\n\r\n    this.immerserNode = document.querySelector(this.options._selectorImmerser);\r\n    if (!this.immerserNode) {\r\n      console.warn('Immerser element not found. Check out documentation https://github.com/dubaua/immerser#how-to-use');\r\n      return;\r\n    }\r\n\r\n    this.initStatemap();\r\n    this.setSizes();\r\n\r\n    this.onScroll = this.handleScroll.bind(this);\r\n    this.onResize = this.handleResize.bind(this);\r\n\r\n    window.addEventListener('scroll', this.onScroll, false);\r\n    window.addEventListener('resize', this.onResize, false);\r\n\r\n    if (typeof this.options.onInit === 'function') {\r\n      this.options.onInit(this);\r\n    }\r\n  }\r\n\r\n  mergeOptions(options = {}) {\r\n    for (const key in this.defaults) {\r\n      if (typeof this.defaults[key].validator !== 'function') {\r\n        this.options[key] = this.defaults[key];\r\n      } else {\r\n        const { defaultValue, description, validator } = this.defaults[key];\r\n        this.options[key] = defaultValue;\r\n        if (options.hasOwnProperty(key)) {\r\n          const value = options[key];\r\n          if (validator(value)) {\r\n            this.options[key] = value;\r\n          } else {\r\n            console.warn(\r\n              `Expected ${key} is ${description}, got <${typeof value}> ${value}. Fallback to default value ${defaultValue}. Check documentation https://github.com/dubaua/immerser#options`\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  initStatemap() {\r\n    const layerNodeList = document.querySelectorAll(this.options._selectorLayer);\r\n    utils.forEachNode(layerNodeList, (layerNode, layerIndex) => {\r\n      let solidClassnames = this.options.solidClassnameArray[layerIndex];\r\n      if (layerNode.dataset.immerserLayerConfig) {\r\n        try {\r\n          solidClassnames = JSON.parse(layerNode.dataset.immerserLayerConfig);\r\n        } catch (e) {\r\n          console.error('Failed to parse JSON class configuration.', e);\r\n        }\r\n      }\r\n\r\n      let id = layerNode.id;\r\n      if (!id) {\r\n        id = `immerser-section-${layerIndex}`;\r\n        layerNode.id = id;\r\n        layerNode.__immerserCustomId = true;\r\n      }\r\n\r\n      this.statemap.push({\r\n        node: layerNode,\r\n        id,\r\n        solidClassnames,\r\n        top: 0,\r\n        bottom: 0,\r\n      });\r\n    });\r\n  }\r\n\r\n  setSizes() {\r\n    // set window sizes\r\n    this.documentHeight = document.documentElement.offsetHeight;\r\n    this.windowHeight = window.innerHeight;\r\n\r\n    // set immerserSizes\r\n    this.immerserTop = this.immerserNode.offsetTop;\r\n    this.immerserHeight = this.immerserNode.offsetHeight;\r\n\r\n    // set layer sizes\r\n    this.statemap = this.statemap.map(state => {\r\n      const top = state.node.offsetTop;\r\n      const bottom = top + state.node.offsetHeight;\r\n      return {\r\n        ...state,\r\n        top,\r\n        bottom,\r\n      };\r\n    });\r\n\r\n    // set statemap\r\n    this.statemap = this.statemap.map((state, index) => {\r\n      const isFirst = index === 0;\r\n      const isLast = index === this.statemap.length - 1;\r\n\r\n      // actually not 0 and this.documentHeight but start of first and end of last.\r\n      const enter = isFirst ? 0 : this.statemap[index - 1].bottom - this.immerserTop;\r\n      const startEnter = isFirst ? 0 : enter - this.immerserHeight;\r\n      const leave = isLast ? this.documentHeight : this.statemap[index].bottom - this.immerserTop;\r\n      const startLeave = isLast ? this.documentHeight : leave - this.immerserHeight;\r\n\r\n      return {\r\n        ...state,\r\n        startEnter,\r\n        enter,\r\n        startLeave,\r\n        leave,\r\n      };\r\n    });\r\n\r\n    this.reactiveWindowWidth.onChange = nextWindowWidth => {\r\n      if (nextWindowWidth >= this.options.fromViewportWidth) {\r\n        if (!this.isBound) {\r\n          this.bind();\r\n        }\r\n      } else if (this.isBound) {\r\n        this.unbind();\r\n      }\r\n    };\r\n    this.reactiveWindowWidth.value = window.innerWidth;\r\n  }\r\n\r\n  initPager() {\r\n    this.reactiveActiveLayer.onChange = nextIndex => {\r\n      if (!this.isBound) return;\r\n\r\n      // draw active pager link\r\n      this.drawPagerLinks(nextIndex);\r\n\r\n      // update hash if the option passed\r\n      if (this.options.hasToUpdateHash) {\r\n        this.updateHash(nextIndex);\r\n      }\r\n\r\n      // fire callback function if the option passed\r\n      if (typeof this.options.onActiveLayerChange === 'function') {\r\n        this.options.onActiveLayerChange(nextIndex, this);\r\n      }\r\n    };\r\n  }\r\n\r\n  createPagerLinks() {\r\n    const { classnamePager, classnamePagerLink } = this.options;\r\n    this.pagerNode.classList.add(classnamePager);\r\n\r\n    this.statemap.forEach((state, index) => {\r\n      const pagerLinkNode = document.createElement('a');\r\n      pagerLinkNode.classList.add(classnamePagerLink);\r\n      pagerLinkNode.href = `#${state.id}`;\r\n\r\n      // store stateIndex in data attribute because it cloned properly\r\n      pagerLinkNode.dataset.immerserStateIndex = index;\r\n\r\n      // bind attribute to synchronize pager link hover\r\n      pagerLinkNode.dataset.immerserSynchroHover = `pager-link-${index}`;\r\n\r\n      this.pagerNode.appendChild(pagerLinkNode);\r\n\r\n      state.pagerLinkNodeArray = [];\r\n    });\r\n  }\r\n\r\n  initPagerLinks() {\r\n    const pagerLinkNodelist = this.immerserNode.querySelectorAll(this.options._selectorPagerLink);\r\n    utils.forEachNode(pagerLinkNodelist, pagerLinkNode => {\r\n      const stateIndex = pagerLinkNode.dataset.immerserStateIndex;\r\n      this.statemap[stateIndex].pagerLinkNodeArray.push(pagerLinkNode);\r\n    });\r\n  }\r\n\r\n  initHoverSynchro(synchroHoverNodeList) {\r\n    this.reactiveSynchroHoverId.onChange = nextId => {\r\n      this.drawSynchroHover(nextId);\r\n    };\r\n\r\n    utils.forEachNode(synchroHoverNodeList, synchroHoverNode => {\r\n      const handleMouseOver = e => {\r\n        const synchroHoverId = e.target.dataset.immerserSynchroHover;\r\n        this.reactiveSynchroHoverId.value = synchroHoverId;\r\n      };\r\n      synchroHoverNode.addEventListener('mouseover', handleMouseOver);\r\n      synchroHoverNode.__immerserHandleMouseOver = handleMouseOver;\r\n\r\n      const handleMouseOut = () => {\r\n        this.reactiveSynchroHoverId.value = undefined;\r\n      };\r\n      synchroHoverNode.addEventListener('mouseout', handleMouseOut);\r\n      synchroHoverNode.__immerserHandleMouseOut = handleMouseOut;\r\n\r\n      this.synchroHoverNodeArray.push(synchroHoverNode);\r\n    });\r\n  }\r\n\r\n  createMasks() {\r\n    const maskStyles = {\r\n      position: 'absolute',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      overflow: 'hidden',\r\n    };\r\n\r\n    this.originalChildrenNodeList = this.immerserNode.querySelectorAll(this.options._selectorSolid);\r\n    utils.bindStyles(this.immerserNode, { pointerEvents: 'none', touchAction: 'none' });\r\n\r\n    const customMaskNodeList = this.immerserNode.querySelectorAll(this.options._selectorMask);\r\n    this.isCustomMarkup = customMaskNodeList.length === this.statemap.length;\r\n    if (customMaskNodeList.length > 0 && customMaskNodeList.length !== this.statemap.length) {\r\n      // further possible to explicitly pass mask index\r\n      console.warn(\"You're trying use custom markup, but count of your immerser masks doesn't equal layers count.\");\r\n    }\r\n\r\n    // since custom child wrapped in ignoring pointer and touch events immerser mask, we should explicitly set them on\r\n    utils.forEachNode(customMaskNodeList, customMaskNode => {\r\n      const customChildrenHTMLCollection = customMaskNode.querySelector(this.options._selectorMaskInner).children;\r\n      for (let i = 0; i < customChildrenHTMLCollection.length; i++) {\r\n        utils.bindStyles(customChildrenHTMLCollection[i], { pointerEvents: 'all', touchAction: 'auto' });\r\n      }\r\n    });\r\n\r\n    this.statemap = this.statemap.map((state, stateIndex) => {\r\n      // create or assign existing markup, bind styles\r\n      const maskNode = this.isCustomMarkup ? customMaskNodeList[stateIndex] : document.createElement('div');\r\n      utils.bindStyles(maskNode, maskStyles);\r\n      const maskInnerNode = this.isCustomMarkup\r\n        ? maskNode.querySelector(this.options._selectorMaskInner)\r\n        : document.createElement('div');\r\n      utils.bindStyles(maskInnerNode, maskStyles);\r\n\r\n      // clone solids to innerMask\r\n      utils.forEachNode(this.originalChildrenNodeList, childNode => {\r\n        const clonnedChildNode = childNode.cloneNode(true);\r\n        utils.bindStyles(clonnedChildNode, { pointerEvents: 'all', touchAction: 'auto' });\r\n        clonnedChildNode.immerserClonned = true;\r\n        maskInnerNode.appendChild(clonnedChildNode);\r\n      });\r\n\r\n      // assing class modifiers to clonned solids\r\n      const clonedSolidNodeList = maskInnerNode.querySelectorAll(this.options._selectorSolid);\r\n      utils.forEachNode(clonedSolidNodeList, clonedSolidNode => {\r\n        const solidId = clonedSolidNode.dataset.immerserSolid;\r\n        if (state.solidClassnames && state.solidClassnames.hasOwnProperty(solidId)) {\r\n          clonedSolidNode.classList.add(state.solidClassnames[solidId]);\r\n        }\r\n      });\r\n\r\n      // a11y\r\n      if (stateIndex !== 0) {\r\n        maskNode.setAttribute('aria-hidden', 'true');\r\n      }\r\n\r\n      maskNode.appendChild(maskInnerNode);\r\n      this.immerserNode.appendChild(maskNode);\r\n\r\n      this.immerserMaskNodeArray.push(maskNode);\r\n\r\n      return { ...state, maskNode, maskInnerNode };\r\n    });\r\n\r\n    // detach original solid nodes\r\n    utils.forEachNode(this.originalChildrenNodeList, childNode => {\r\n      this.immerserNode.removeChild(childNode);\r\n    });\r\n  }\r\n\r\n  bind() {\r\n    // check if pager, init pager, create links\r\n    this.pagerNode = document.querySelector(this.options._selectorPager);\r\n    if (this.pagerNode) {\r\n      this.initPager();\r\n      this.createPagerLinks();\r\n    }\r\n\r\n    this.createMasks();\r\n\r\n    if (this.pagerNode) {\r\n      this.initPagerLinks();\r\n    }\r\n\r\n    const synchroHoverNodeList = document.querySelectorAll(this.options._selectorSynchroHover);\r\n    if (synchroHoverNodeList.length) {\r\n      this.initHoverSynchro(synchroHoverNodeList);\r\n    }\r\n\r\n    if (typeof this.options.onBind === 'function') {\r\n      this.options.onBind(this);\r\n    }\r\n\r\n    this.isBound = true;\r\n\r\n    this.draw();\r\n    this.drawPagerLinks(this.reactiveActiveLayer.value);\r\n  }\r\n\r\n  unbind() {\r\n    // detach hover syncro\r\n    this.synchroHoverNodeArray.forEach(synchroHoverNode => {\r\n      synchroHoverNode.removeEventListener('mouseover', synchroHoverNode.__immerserHandleMouseOver);\r\n      synchroHoverNode.removeEventListener('mouseout', synchroHoverNode.__immerserHandleMouseOut);\r\n    });\r\n\r\n    this.statemap.forEach(state => {\r\n      // clear pagerLinkNodeArray\r\n      state.pagerLinkNodeArray = [];\r\n      // clear custom id on layers\r\n      if (state.node.__immerserCustomId) {\r\n        state.node.removeAttribute('id');\r\n      }\r\n    });\r\n\r\n    // restore original children\r\n    utils.forEachNode(this.originalChildrenNodeList, childNode => {\r\n      this.immerserNode.appendChild(childNode);\r\n    });\r\n\r\n    // remove all but custom elements, remove attributes\r\n    this.immerserMaskNodeArray.forEach(immerserMaskNode => {\r\n      // if mask was created\r\n      if (this.isCustomMarkup) {\r\n        // clear mask attributes\r\n        immerserMaskNode.removeAttribute('style');\r\n        immerserMaskNode.removeAttribute('aria-hidden');\r\n        // clear innerMask\r\n        const immerserMaskInnerNode = immerserMaskNode.querySelector(this.options._selectorMaskInner);\r\n        immerserMaskInnerNode.removeAttribute('style');\r\n        // clear clonned solids\r\n        const clonnedSolidNodeList = immerserMaskInnerNode.querySelectorAll(this.options._selectorSolid);\r\n        utils.forEachNode(clonnedSolidNodeList, clonnedSolideNode => {\r\n          if (clonnedSolideNode.immerserClonned) {\r\n            immerserMaskInnerNode.removeChild(clonnedSolideNode);\r\n          }\r\n        });\r\n      } else {\r\n        this.immerserNode.removeChild(immerserMaskNode);\r\n      }\r\n    });\r\n\r\n    this.pagerNode.innerHTML = '';\r\n\r\n    if (typeof this.options.onUnbind === 'function') {\r\n      this.options.onUnbind(this);\r\n    }\r\n\r\n    this.isBound = false;\r\n\r\n    this.reactiveActiveLayer.value = undefined;\r\n  }\r\n\r\n  destroy() {\r\n    this.unbind();\r\n\r\n    window.removeEventListener('scroll', this.onScroll, false);\r\n    window.removeEventListener('resize', this.onResize, false);\r\n\r\n    if (typeof this.options.onDestroy === 'function') {\r\n      this.options.onDestroy(this);\r\n    }\r\n\r\n    this.initState();\r\n  }\r\n\r\n  draw() {\r\n    const y = utils.getLastScrollPositionY();\r\n    this.statemap.forEach(({ startEnter, enter, startLeave, leave, maskNode, maskInnerNode, top, bottom }, index) => {\r\n      let progress;\r\n\r\n      if (startEnter > y) {\r\n        progress = this.immerserHeight;\r\n      } else if (startEnter <= y && y < enter) {\r\n        progress = enter - y;\r\n      } else if (enter <= y && y < startLeave) {\r\n        progress = 0;\r\n      } else if (startLeave <= y && y < leave) {\r\n        progress = startLeave - y;\r\n      } else if (y >= leave) {\r\n        progress = -this.immerserHeight;\r\n      }\r\n\r\n      maskNode.style.transform = `translateY(${progress}px)`;\r\n      maskInnerNode.style.transform = `translateY(${-progress}px)`;\r\n\r\n      if (this.pagerNode) {\r\n        const pagerScrollActivePoint = y + this.windowHeight * (1 - this.options.pagerTreshold);\r\n        if (top <= pagerScrollActivePoint && pagerScrollActivePoint < bottom) {\r\n          this.reactiveActiveLayer.value = index;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  drawPagerLinks() {\r\n    this.statemap.forEach(({ pagerLinkNodeArray }) => {\r\n      pagerLinkNodeArray.forEach(pagerLinkNode => {\r\n        if (parseInt(pagerLinkNode.dataset.immerserStateIndex, 10) === this.reactiveActiveLayer.value) {\r\n          pagerLinkNode.classList.add(this.options.classnamePagerLinkActive);\r\n        } else {\r\n          pagerLinkNode.classList.remove(this.options.classnamePagerLinkActive);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  drawSynchroHover(synchroHoverId) {\r\n    this.synchroHoverNodeArray.forEach(synchroHoverNode => {\r\n      if (synchroHoverNode.dataset.immerserSynchroHover === synchroHoverId) {\r\n        synchroHoverNode.classList.add('_hover');\r\n      } else {\r\n        synchroHoverNode.classList.remove('_hover');\r\n      }\r\n    });\r\n  }\r\n\r\n  updateHash(stateIndex) {\r\n    const currentState = this.statemap[stateIndex];\r\n    const nextHash = currentState.id;\r\n    // this prevent move to anchor\r\n    currentState.node.removeAttribute('id');\r\n    window.location.hash = nextHash;\r\n    currentState.node.setAttribute('id', nextHash);\r\n  }\r\n\r\n  handleScroll() {\r\n    if (this.isBound) {\r\n      this.draw();\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    if (this.resizeTimerId) window.cancelAnimationFrame(this.resizeTimerId);\r\n    this.resizeTimerId = window.requestAnimationFrame(() => {\r\n      this.setSizes();\r\n      this.draw();\r\n    });\r\n  }\r\n}\r\n"],"names":["const","CLASSNAME_REGEX","classnameValidator","string","test","_selectorImmerser","_selectorLayer","_selectorSolid","_selectorPager","_selectorPagerLink","_selectorMask","_selectorMaskInner","_selectorSynchroHover","solidClassnameArray","defaultValue","description","validator","x","Array","isArray","length","fromViewportWidth","pagerTreshold","hasToUpdateHash","classnamePager","classnamePagerLink","classnamePagerLinkActive","onInit","onBind","onUnbind","onDestroy","onActiveLayerChange","bindStyles","node","styles","rule","style","forEachNode","nodeList","callback","let","index","createObservable","didSet","initial","internal","callbacks","this","push","next","i","Immerser","constructor","options","defaults","initState","init","statemap","isBound","isCustomMarkup","immerserNode","pagerNode","originalChildrenNodeList","immerserMaskNodeArray","synchroHoverNodeArray","documentHeight","windowHeight","immerserTop","immerserHeight","resizeTimerId","reactiveSynchroHoverId","utils","reactiveActiveLayer","reactiveWindowWidth","onResize","onScroll","mergeOptions","document","querySelector","initStatemap","setSizes","handleScroll","bind","handleResize","window","addEventListener","console","warn","key","hasOwnProperty","value","querySelectorAll","layerNode","layerIndex","solidClassnames","dataset","immerserLayerConfig","JSON","parse","e","error","id","__immerserCustomId","documentElement","offsetHeight","innerHeight","offsetTop","map","state","top","Object","isFirst","isLast","enter","bottom","leave","onChange","nextWindowWidth","unbind","innerWidth","initPager","nextIndex","drawPagerLinks","updateHash","createPagerLinks","classList","add","forEach","pagerLinkNode","createElement","href","immerserStateIndex","immerserSynchroHover","appendChild","pagerLinkNodeArray","initPagerLinks","initHoverSynchro","synchroHoverNodeList","nextId","drawSynchroHover","synchroHoverNode","handleMouseOver","target","__immerserHandleMouseOver","handleMouseOut","undefined","__immerserHandleMouseOut","createMasks","maskStyles","customMaskNodeList","customMaskNode","customChildrenHTMLCollection","children","stateIndex","maskNode","maskInnerNode","childNode","clonnedChildNode","cloneNode","immerserClonned","clonedSolidNode","solidId","immerserSolid","setAttribute","removeChild","draw","removeEventListener","removeAttribute","immerserMaskNode","immerserMaskInnerNode","clonnedSolideNode","innerHTML","destroy","scrollY","y","scrollTop","Math","min","max","ref","progress","startEnter","startLeave","transform","pagerScrollActivePoint","parseInt","remove","synchroHoverId","currentState","nextHash","location","hash","cancelAnimationFrame","requestAnimationFrame"],"mappings":"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"}