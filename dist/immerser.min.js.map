{"version":3,"sources":["immerser.js"],"names":["layerNodeArray","Array","from","document","querySelectorAll","layers","solidNodeArray","solids","documentHeight","windowHeight","resizeTimerId","initLayers","map","layer","solidClassConfig","JSON","parse","dataset","immerserConfig","node","initSolids","solid","index","solidId","immerserId","id","originalChildren","states","layerIndex","setStates","forEach","layerStart","offsetTop","offsetHeight","solidIndex","isFirst","isLast","length","prevState","height","leave","startLeave","enter","startEnter","nextState","className","state","Object","assign","createDOMStructure","maskAndWrapperStyles","position","top","right","bottom","left","overflow","children","stateIndex","wrapper","createElement","applyStyles","wrapperNode","child","appendChild","cloneNode","mask","maskNode","setAttribute","classList","add","setSolidSizes","style","display","width","getBoundingClientRect","setWindowSizes","documentElement","window","innerHeight","onResize","clearTimeout","setTimeout","drawSolids","y","getLastScrollPositionY","progress","transform","Math","min","max","scrollTop","styles","rule","immerser","addEventListener"],"mappings":";AAiMC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAjMD,IAAIA,EAAiBC,MAAMC,KAAKC,SAASC,iBAAiB,2BACtDC,EAAS,GACTC,EAAiBL,MAAMC,KAAKC,SAASC,iBAAiB,uBACtDG,EAAS,GACTC,EAAiB,EACjBC,EAAe,EACfC,EAAgB,KAEpB,SAASC,IACPN,EAASL,EAAeY,IAAI,SAAAC,GACpBC,IAAAA,EAAmBC,KAAKC,MAAMH,EAAMI,QAAQC,gBAE3C,cADAL,EAAMI,QAAQC,eACd,CACLC,KAAMN,EACNC,iBAAAA,KAKN,SAASM,IACPb,EAASD,EAAeM,IAAI,SAACS,EAAOC,GAC5BC,IAAAA,EAAUF,EAAMJ,QAAQO,WAGvB,cAFAH,EAAMJ,QAAQO,WAEd,CACLC,GAAIF,EACJJ,KAAME,EACNK,iBAAkB,KAClBC,OAAQtB,EAAOO,IAAI,SAACC,EAAOS,GAAW,MAAA,CAAEM,WAAYN,QAK1D,SAASO,IACPxB,EAAOyB,QAAQ,SAACjB,EAAOe,GACfG,IAAAA,EAAalB,EAAMM,KAAKa,UACAnB,EAAMM,KAAKc,aAEzC1B,EAAOuB,QAAQ,SAACT,EAAOa,GAEfC,IAAAA,EAAyB,IAAfP,EACVQ,EAASR,IAAevB,EAAOgC,OAAS,EAExCC,EAAYH,EAAU,KAAO5B,EAAO2B,GAAYP,OAAOC,EAAa,GAEpEW,EAASlB,EAAMF,KAAKc,aACpBO,EAAQJ,EAAS5B,EAAiBC,EAAeY,EAAMF,KAAKa,UAAYD,EACxEU,EAAaL,EAAS5B,EAAiBgC,EAAQD,EAC/CG,EAAQP,EAAU,EAAIG,EAAUE,MAChCG,EAAaR,EAAU,EAAIO,EAAQH,EAEnCK,EAAY,CAChBC,UAAWxC,EAAOuB,GAAYd,iBAAiBO,EAAMI,IACrDG,WAAAA,EACAe,WAAAA,EACAD,MAAAA,EACAD,WAAAA,EACAD,MAAAA,EACAD,OAAAA,GAGFhC,EAAO2B,GAAYP,OAAOG,QAAQ,SAAAgB,GAC5BA,EAAMlB,aAAegB,EAAUhB,aACjCkB,EAAQC,OAAOC,OAAOF,EAAOF,UAOvC,SAASK,IACDC,IAAAA,EAAuB,CAC3BC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,SAAU,UAGZjD,EAAOuB,QAAQ,SAAAT,GACbA,EAAMK,iBAAmBzB,MAAMC,KAAKmB,EAAMF,KAAKsC,UAC/CpC,EAAMM,OAAOG,QAAQ,SAACgB,EAAOY,GACrBC,IAAAA,EAAUxD,SAASyD,cAAc,OACvCC,EAAYF,EAAST,GACrBJ,EAAMgB,YAAcH,EAEpBtC,EAAMK,iBAAiBI,QAAQ,SAAAiC,GAASJ,OAAAA,EAAQK,YAAYD,EAAME,WAAU,MAEtEC,IAAAA,EAAO/D,SAASyD,cAAc,OACpCC,EAAYK,EAAMhB,GAClBJ,EAAMqB,SAAWD,EAEE,IAAfR,GACFQ,EAAKE,aAAa,cAAe,QAG/BtB,EAAMD,WACRqB,EAAKG,UAAUC,IAAIxB,EAAMD,WAE3BqB,EAAKF,YAAYL,GACjBtC,EAAMF,KAAK6C,YAAYE,OAK7B,SAASK,IACPhE,EAAOuB,QAAQ,SAAAT,GAEbA,EAAMK,iBAAiBI,QAAQ,SAAAiC,GAAUA,OAAAA,EAAMS,MAAMC,QAAU,KAC/DZ,EAAYxC,EAAMF,KAAM,CACtBuD,MAAO,KACPnC,OAAQ,OAIgBlB,IAAAA,EAAAA,EAAMF,KAAKwD,wBAA7BD,EAAAA,EAAAA,MAAOnC,EAAAA,EAAAA,OAGfsB,EAAYxC,EAAMF,KAAM,CACtBqC,SAAU,SACVkB,MAAOA,EAAQ,KACfnC,OAAQA,EAAS,OAInBlB,EAAMK,iBAAiBI,QAAQ,SAAAiC,GAAUA,OAAAA,EAAMS,MAAMC,QAAU,WAInE,SAASG,IACPpE,EAAiBL,SAAS0E,gBAAgB5C,aAC1CxB,EAAeqE,OAAOC,YAGxB,SAASC,IAGPC,aAAavE,GACbA,EAAgBwE,WAAW,WACzBN,IACAL,IACA1C,IACAsD,KACC,IAGL,SAASA,IACDC,IAAAA,EAAIC,IACL,IAAA,IAAM9D,KAAWhB,EAAQ,CACRA,EAAOgB,GACfI,OAAOG,QAAQ,SAA6E,GAA1Ea,IACxB2C,EADwB3C,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,WAAYD,EAAAA,EAAAA,MAAOD,EAAAA,EAAAA,OAAQ4B,EAAAA,EAAAA,SAAUL,EAAAA,EAAAA,YAGlFwB,EADE3C,EAAayC,EACJ7C,EACFI,GAAcyC,GAAKA,EAAI1C,EACrBA,EAAQ0C,EACV1C,GAAS0C,GAAKA,EAAI3C,EAChB,EACFA,GAAc2C,GAAKA,EAAI5C,EACrBC,EAAa2C,GAEZ7C,EAEd4B,EAASK,MAAMe,UAA0BD,cAAAA,OAAAA,EAAzC,OACAxB,EAAYU,MAAMe,UAA0B,cAAA,QAACD,EAA7C,UAMN,SAASD,IAEAG,OAAAA,KAAKC,IAAID,KAAKE,IAAIvF,SAAS0E,gBAAgBc,UAAW,GAAInF,GAGnE,SAASqD,EAAY1C,EAAMyE,GACpB,IAAA,IAAMC,KAAQD,EACjBzE,EAAKqD,MAAMqB,GAAQD,EAAOC,GAIf,SAASC,IACtBlB,IACAjE,IACAS,IACAS,IACAoB,IACAsB,IACAY,IAEAL,OAAOiB,iBAAiB,SAAUZ,GAAY,GAC9CL,OAAOiB,iBAAiB,SAAUf,GAAU","file":"immerser.min.js","sourceRoot":"..","sourcesContent":["var layerNodeArray = Array.from(document.querySelectorAll('[data-immerser-config]'));\r\nvar layers = {};\r\nvar solidNodeArray = Array.from(document.querySelectorAll('[data-immerser-id]'));\r\nvar solids = {};\r\nvar documentHeight = 0;\r\nvar windowHeight = 0;\r\nvar resizeTimerId = null;\r\n\r\nfunction initLayers() {\r\n  layers = layerNodeArray.map(layer => {\r\n    const solidClassConfig = JSON.parse(layer.dataset.immerserConfig);\r\n    delete layer.dataset.immerserConfig;\r\n    return {\r\n      node: layer,\r\n      solidClassConfig,\r\n    };\r\n  });\r\n}\r\n\r\nfunction initSolids() {\r\n  solids = solidNodeArray.map((solid, index) => {\r\n    const solidId = solid.dataset.immerserId;\r\n    delete solid.dataset.immerserId;\r\n\r\n    return {\r\n      id: solidId,\r\n      node: solid,\r\n      originalChildren: null,\r\n      states: layers.map((layer, index) => ({ layerIndex: index })),\r\n    };\r\n  });\r\n}\r\n\r\nfunction setStates() {\r\n  layers.forEach((layer, layerIndex) => {\r\n    const layerStart = layer.node.offsetTop;\r\n    const layerEnd = layerStart + layer.node.offsetHeight;\r\n\r\n    solids.forEach((solid, solidIndex) => {\r\n      // actually here we should check top and bottom layers, not top and bottom of document\r\n      const isFirst = layerIndex === 0;\r\n      const isLast = layerIndex === layers.length - 1;\r\n\r\n      const prevState = isFirst ? null : solids[solidIndex].states[layerIndex - 1];\r\n\r\n      const height = solid.node.offsetHeight;\r\n      const leave = isLast ? documentHeight : windowHeight - solid.node.offsetTop + layerStart;\r\n      const startLeave = isLast ? documentHeight : leave - height;\r\n      const enter = isFirst ? 0 : prevState.leave;\r\n      const startEnter = isFirst ? 0 : enter - height;\r\n\r\n      const nextState = {\r\n        className: layers[layerIndex].solidClassConfig[solid.id],\r\n        layerIndex,\r\n        startEnter,\r\n        enter,\r\n        startLeave,\r\n        leave,\r\n        height,\r\n      };\r\n\r\n      solids[solidIndex].states.forEach(state => {\r\n        if (state.layerIndex === nextState.layerIndex) {\r\n          state = Object.assign(state, nextState);\r\n        }\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nfunction createDOMStructure() {\r\n  const maskAndWrapperStyles = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    overflow: 'hidden',\r\n  };\r\n\r\n  solids.forEach(solid => {\r\n    solid.originalChildren = Array.from(solid.node.children);\r\n    solid.states.forEach((state, stateIndex) => {\r\n      const wrapper = document.createElement('div');\r\n      applyStyles(wrapper, maskAndWrapperStyles);\r\n      state.wrapperNode = wrapper;\r\n\r\n      solid.originalChildren.forEach(child => wrapper.appendChild(child.cloneNode(true)));\r\n\r\n      const mask = document.createElement('div');\r\n      applyStyles(mask, maskAndWrapperStyles);\r\n      state.maskNode = mask;\r\n\r\n      if (stateIndex !== 0) {\r\n        mask.setAttribute('aria-hidden', 'true');\r\n      }\r\n\r\n      if (state.className) {\r\n        mask.classList.add(state.className);\r\n      }\r\n      mask.appendChild(wrapper);\r\n      solid.node.appendChild(mask);\r\n    });\r\n  });\r\n}\r\n\r\nfunction setSolidSizes() {\r\n  solids.forEach(solid => {\r\n    // reset to original child sizes, show original child\r\n    solid.originalChildren.forEach(child => (child.style.display = ''));\r\n    applyStyles(solid.node, {\r\n      width: null,\r\n      height: null,\r\n    });\r\n\r\n    // get sizes\r\n    const { width, height } = solid.node.getBoundingClientRect();\r\n\r\n    // apply sizes\r\n    applyStyles(solid.node, {\r\n      overflow: 'hidden',\r\n      width: width + 'px',\r\n      height: height + 'px',\r\n    });\r\n\r\n    // hide\r\n    solid.originalChildren.forEach(child => (child.style.display = 'none'));\r\n  });\r\n}\r\n\r\nfunction setWindowSizes() {\r\n  documentHeight = document.documentElement.offsetHeight;\r\n  windowHeight = window.innerHeight;\r\n}\r\n\r\nfunction onResize() {\r\n  // simlpe debouncer\r\n  // TODO refactor on requestAnimationFrame\r\n  clearTimeout(resizeTimerId);\r\n  resizeTimerId = setTimeout(() => {\r\n    setWindowSizes();\r\n    setSolidSizes();\r\n    setStates();\r\n    drawSolids();\r\n  }, 16);\r\n}\r\n\r\nfunction drawSolids() {\r\n  const y = getLastScrollPositionY();\r\n  for (const solidId in solids) {\r\n    const solidConfig = solids[solidId];\r\n    solidConfig.states.forEach(({ startEnter, enter, startLeave, leave, height, maskNode, wrapperNode }) => {\r\n      let progress;\r\n      if (startEnter > y) {\r\n        progress = height;\r\n      } else if (startEnter <= y && y < enter) {\r\n        progress = enter - y;\r\n      } else if (enter <= y && y < startLeave) {\r\n        progress = 0;\r\n      } else if (startLeave <= y && y < leave) {\r\n        progress = startLeave - y;\r\n      } else {\r\n        progress = -height;\r\n      }\r\n      maskNode.style.transform = `translateY(${progress}px)`;\r\n      wrapperNode.style.transform = `translateY(${-progress}px)`;\r\n    });\r\n  }\r\n}\r\n\r\n// utils\r\nfunction getLastScrollPositionY() {\r\n  // limit scroll position between 0 and document height in case of iOS overflow scroll\r\n  return Math.min(Math.max(document.documentElement.scrollTop, 0), documentHeight);\r\n}\r\n\r\nfunction applyStyles(node, styles) {\r\n  for (const rule in styles) {\r\n    node.style[rule] = styles[rule];\r\n  }\r\n}\r\n\r\nexport default function immerser() {\r\n  setWindowSizes();\r\n  initLayers();\r\n  initSolids();\r\n  setStates();\r\n  createDOMStructure();\r\n  setSolidSizes();\r\n  drawSolids();\r\n\r\n  window.addEventListener('scroll', drawSolids, false);\r\n  window.addEventListener('resize', onResize, false);\r\n}"]}