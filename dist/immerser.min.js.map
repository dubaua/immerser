{"version":3,"file":"immerser.min.js","sources":["../src/defaults.js","../node_modules/create-observable/index.js","../src/utils.js","../src/immerser.js"],"sourcesContent":["const CLASSNAME_REGEX = /^[a-z_-][a-z\\d_-]*$/i;\r\n\r\nfunction classnameValidator(string) {\r\n  return typeof string === 'string' && string !== '' && CLASSNAME_REGEX.test(string);\r\n}\r\n\r\nexport const DEFAULTS = {\r\n  // not redefineable defaults\r\n  selectorImmerser: '[data-immerser]',\r\n  selectorLayer: '[data-immerser-layer]',\r\n  selectorSolid: '[data-immerser-solid]',\r\n  selectorPager: '[data-immerser-pager]',\r\n  selectorPagerLink: '[data-immerser-state-index]',\r\n  selectorMask: '[data-immerser-mask]',\r\n  selectorMaskInner: '[data-immerser-mask-inner]',\r\n  selectorSynchroHover: '[data-immerser-synchro-hover]',\r\n}\r\n\r\nexport const DEFAULT_OPTIONS = {\r\n  // redefineable options\r\n  solidClassnameArray: {\r\n    initial: [],\r\n    description: 'non empty array of objects',\r\n    validator: x => Array.isArray(x) && x.length !== 0,\r\n  },\r\n  fromViewportWidth: {\r\n    initial: 1024,\r\n    description: 'a natural number',\r\n    validator: x => typeof x === 'number' && 0 <= x && x % 1 === 0,\r\n  },\r\n  pagerThreshold: {\r\n    initial: 0.5,\r\n    description: 'a number between 0 and 1',\r\n    validator: x => typeof x === 'number' && 0 <= x && x <= 1,\r\n  },\r\n  hasToUpdateHash: {\r\n    initial: false,\r\n    description: 'boolean',\r\n    validator: x => typeof x === 'boolean',\r\n  },\r\n  scrollAdjustThreshold: {\r\n    initial: 0,\r\n    description: 'a number greater than or equal to 0',\r\n    validator: x => typeof x === 'number' && x >= 0,\r\n  },\r\n  scrollAdjustDelay: {\r\n    initial: 600,\r\n    description: 'a number greater than or equal to 300',\r\n    validator: x => typeof x === 'number' && x >= 300,\r\n  },\r\n  classnamePager: {\r\n    initial: 'pager',\r\n    description: 'valid non empty classname string',\r\n    validator: classnameValidator,\r\n  },\r\n  classnamePagerLink: {\r\n    initial: 'pager__link',\r\n    description: 'valid non empty classname string',\r\n    validator: classnameValidator,\r\n  },\r\n  classnamePagerLinkActive: {\r\n    initial: 'pager__link--active',\r\n    description: 'valid non empty classname string',\r\n    validator: classnameValidator,\r\n  },\r\n  onInit: {\r\n    initial: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onBind: {\r\n    initial: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onUnbind: {\r\n    initial: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onDestroy: {\r\n    initial: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n  onActiveLayerChange: {\r\n    initial: null,\r\n    description: 'function',\r\n    validator: x => typeof x === 'function',\r\n  },\r\n};\r\n","/**\r\n * Create reactive observable object\r\n *\r\n * @param {any} options.initial initial value\r\n * @param {function} options.onChange a function called after setting a new value\r\n * @returns {object}\r\n *\r\n * @example\r\n *\r\n * @name createObservable\r\n * @function\r\n */\r\nmodule.exports = function(options) {\r\n  var initial = options && options.hasOwnProperty('initial') ? options.initial : undefined;\r\n  var onChange = options && options.hasOwnProperty('onChange') ? options.onChange : undefined;\r\n\r\n  return {\r\n    internal: initial,\r\n    callbacks: typeof onChange === 'function' ? [onChange] : [],\r\n\r\n    get onChange() {\r\n      return this.callbacks;\r\n    },\r\n\r\n    set onChange(callback) {\r\n      if (typeof callback === 'function') {\r\n        this.callbacks.push(callback);\r\n      } else {\r\n        throw new Error('[createObservable] callback must be a function.');\r\n      }\r\n    },\r\n\r\n    get value() {\r\n      return this.internal;\r\n    },\r\n\r\n    set value(next) {\r\n      if (next !== this.internal) {\r\n        var prev = this.internal;\r\n        this.internal = next;\r\n        for (let i = 0; i < this.callbacks.length; i++) {\r\n          this.callbacks[i](this.internal, prev);\r\n        }\r\n      }\r\n    },\r\n  };\r\n};\r\n","export function bindStyles(node, styles) {\r\n  for (const rule in styles) {\r\n    node.style[rule] = styles[rule];\r\n  }\r\n}\r\n\r\nexport function forEachNode(nodeList, callback) {\r\n  for (let index = 0; index < nodeList.length; index++) {\r\n    const node = nodeList[index];\r\n    callback(node, index, nodeList);\r\n  }\r\n}\r\n\r\nexport function limit(number, min, max) {\r\n  return Math.max(Math.min(number, max), min);\r\n}\r\n\r\nexport function getLastScrollPosition() {\r\n  const scrollX = window.scrollX || document.documentElement.scrollLeft;\r\n  const scrollY = window.scrollY || document.documentElement.scrollTop;\r\n  // limit scroll position between 0 and document height in case of iOS overflow scroll\r\n  return {\r\n    x: limit(scrollX, 0, document.documentElement.offsetWidth),\r\n    y: limit(scrollY, 0, document.documentElement.offsetHeight),\r\n  };\r\n}\r\n\r\nexport function mergeAndValidateOptions(options = {}, defaults, context) {\r\n  for (const key in defaults) {\r\n    const { initial, description, validator } = defaults[key];\r\n    context[key] = initial;\r\n    if (options.hasOwnProperty(key)) {\r\n      const value = options[key];\r\n      if (validator(value)) {\r\n        context[key] = value;\r\n      } else {\r\n        console.warn(\r\n          `Expected ${key} is ${description}, got <${typeof value}> ${value}. Fallback to default value ${initial}. Check documentation https://github.com/dubaua/immerser#options`\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { DEFAULTS, DEFAULT_OPTIONS } from './defaults.js';\r\nimport createObservable from 'create-observable';\r\nimport * as utils from './utils.js';\r\n\r\nexport default class Immerser {\r\n  constructor(options) {\r\n    this.initState();\r\n    this.init(options);\r\n  }\r\n\r\n  initState() {\r\n    this.options = { ...DEFAULTS };\r\n    this.statemap = [];\r\n    this.isBound = false;\r\n    this.isCustomMarkup = false;\r\n    this.immerserNode = null;\r\n    this.pagerNode = null;\r\n    this.originalChildrenNodeList = null;\r\n    this.immerserMaskNodeArray = [];\r\n    this.synchroHoverNodeArray = [];\r\n    this.documentHeight = 0;\r\n    this.windowHeight = 0;\r\n    this.immerserTop = 0;\r\n    this.immerserHeight = 0;\r\n    this.resizeTimerId = null;\r\n    this.scrollTimerId = null;\r\n    this.reactiveSynchroHoverId = createObservable();\r\n    this.reactiveActiveLayer = createObservable();\r\n    this.reactiveWindowWidth = createObservable();\r\n    this.onResize = null;\r\n    this.onScroll = null;\r\n  }\r\n\r\n  init(options) {\r\n    utils.mergeAndValidateOptions(options, DEFAULT_OPTIONS, this.options);\r\n    this.immerserNode = document.querySelector(this.options.selectorImmerser);\r\n    if (!this.immerserNode) {\r\n      console.warn('Immerser element not found. Check out documentation https://github.com/dubaua/immerser#how-to-use');\r\n      return;\r\n    }\r\n\r\n    this.initStatemap();\r\n    this.setSizes();\r\n\r\n    this.onScroll = this.handleScroll.bind(this);\r\n    this.onResize = this.handleResize.bind(this);\r\n\r\n    window.addEventListener('scroll', this.onScroll, false);\r\n    window.addEventListener('resize', this.onResize, false);\r\n\r\n    if (typeof this.options.onInit === 'function') {\r\n      this.options.onInit(this);\r\n    }\r\n  }\r\n\r\n  initStatemap() {\r\n    const layerNodeList = document.querySelectorAll(this.options.selectorLayer);\r\n    utils.forEachNode(layerNodeList, (layerNode, layerIndex) => {\r\n      let solidClassnames = this.options.solidClassnameArray[layerIndex];\r\n      if (layerNode.dataset.immerserLayerConfig) {\r\n        try {\r\n          solidClassnames = JSON.parse(layerNode.dataset.immerserLayerConfig);\r\n        } catch (e) {\r\n          console.error('Failed to parse JSON class configuration.', e);\r\n        }\r\n      }\r\n\r\n      let id = layerNode.id;\r\n      if (!id) {\r\n        id = `immerser-section-${layerIndex}`;\r\n        layerNode.id = id;\r\n        layerNode.__immerserCustomId = true;\r\n      }\r\n\r\n      this.statemap.push({\r\n        node: layerNode,\r\n        id,\r\n        solidClassnames,\r\n        top: 0,\r\n        bottom: 0,\r\n      });\r\n    });\r\n  }\r\n\r\n  setSizes() {\r\n    // set window sizes\r\n    this.documentHeight = document.documentElement.offsetHeight;\r\n    this.windowHeight = window.innerHeight;\r\n\r\n    // set immerserSizes\r\n    this.immerserTop = this.immerserNode.offsetTop;\r\n    this.immerserHeight = this.immerserNode.offsetHeight;\r\n\r\n    // set layer sizes\r\n    this.statemap = this.statemap.map(state => {\r\n      const top = state.node.offsetTop;\r\n      const bottom = top + state.node.offsetHeight;\r\n      return {\r\n        ...state,\r\n        top,\r\n        bottom,\r\n      };\r\n    });\r\n\r\n    // set statemap\r\n    this.statemap = this.statemap.map((state, index) => {\r\n      const isFirst = index === 0;\r\n      const isLast = index === this.statemap.length - 1;\r\n\r\n      // actually not 0 and this.documentHeight but start of first and end of last.\r\n      const enter = isFirst ? 0 : this.statemap[index - 1].bottom - this.immerserTop;\r\n      const startEnter = isFirst ? 0 : enter - this.immerserHeight;\r\n      const leave = isLast ? this.documentHeight : this.statemap[index].bottom - this.immerserTop;\r\n      const startLeave = isLast ? this.documentHeight : leave - this.immerserHeight;\r\n\r\n      return {\r\n        ...state,\r\n        startEnter,\r\n        enter,\r\n        startLeave,\r\n        leave,\r\n      };\r\n    });\r\n\r\n    this.reactiveWindowWidth.onChange = nextWindowWidth => {\r\n      if (nextWindowWidth >= this.options.fromViewportWidth) {\r\n        if (!this.isBound) {\r\n          this.bind();\r\n        }\r\n      } else if (this.isBound) {\r\n        this.unbind();\r\n      }\r\n    };\r\n    this.reactiveWindowWidth.value = window.innerWidth;\r\n  }\r\n\r\n  initPager() {\r\n    this.reactiveActiveLayer.onChange = nextIndex => {\r\n      if (!this.isBound) return;\r\n\r\n      // draw active pager link\r\n      this.drawPagerLinks(nextIndex);\r\n\r\n      // update hash if the option passed\r\n      if (this.options.hasToUpdateHash) {\r\n        this.updateHash(nextIndex);\r\n      }\r\n\r\n      // fire callback function if the option passed\r\n      if (typeof this.options.onActiveLayerChange === 'function') {\r\n        this.options.onActiveLayerChange(nextIndex, this);\r\n      }\r\n    };\r\n  }\r\n\r\n  createPagerLinks() {\r\n    const { classnamePager, classnamePagerLink } = this.options;\r\n    this.pagerNode.classList.add(classnamePager);\r\n\r\n    this.statemap.forEach((state, index) => {\r\n      const pagerLinkNode = document.createElement('a');\r\n      pagerLinkNode.classList.add(classnamePagerLink);\r\n      pagerLinkNode.href = `#${state.id}`;\r\n\r\n      // store stateIndex in data attribute because it cloned properly\r\n      pagerLinkNode.dataset.immerserStateIndex = index;\r\n\r\n      // bind attribute to synchronize pager link hover\r\n      pagerLinkNode.dataset.immerserSynchroHover = `pager-link-${index}`;\r\n\r\n      this.pagerNode.appendChild(pagerLinkNode);\r\n\r\n      state.pagerLinkNodeArray = [];\r\n    });\r\n  }\r\n\r\n  initPagerLinks() {\r\n    const pagerLinkNodelist = this.immerserNode.querySelectorAll(this.options.selectorPagerLink);\r\n    utils.forEachNode(pagerLinkNodelist, pagerLinkNode => {\r\n      const stateIndex = pagerLinkNode.dataset.immerserStateIndex;\r\n      this.statemap[stateIndex].pagerLinkNodeArray.push(pagerLinkNode);\r\n    });\r\n  }\r\n\r\n  initHoverSynchro(synchroHoverNodeList) {\r\n    this.reactiveSynchroHoverId.onChange = nextId => {\r\n      this.drawSynchroHover(nextId);\r\n    };\r\n\r\n    utils.forEachNode(synchroHoverNodeList, synchroHoverNode => {\r\n      const handleMouseOver = e => {\r\n        const synchroHoverId = e.target.dataset.immerserSynchroHover;\r\n        this.reactiveSynchroHoverId.value = synchroHoverId;\r\n      };\r\n      synchroHoverNode.addEventListener('mouseover', handleMouseOver);\r\n      synchroHoverNode.__immerserHandleMouseOver = handleMouseOver;\r\n\r\n      const handleMouseOut = () => {\r\n        this.reactiveSynchroHoverId.value = undefined;\r\n      };\r\n      synchroHoverNode.addEventListener('mouseout', handleMouseOut);\r\n      synchroHoverNode.__immerserHandleMouseOut = handleMouseOut;\r\n\r\n      this.synchroHoverNodeArray.push(synchroHoverNode);\r\n    });\r\n  }\r\n\r\n  createMasks() {\r\n    const maskStyles = {\r\n      position: 'absolute',\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      overflow: 'hidden',\r\n    };\r\n\r\n    this.originalChildrenNodeList = this.immerserNode.querySelectorAll(this.options.selectorSolid);\r\n    utils.bindStyles(this.immerserNode, { pointerEvents: 'none', touchAction: 'none' });\r\n\r\n    const customMaskNodeList = this.immerserNode.querySelectorAll(this.options.selectorMask);\r\n    this.isCustomMarkup = customMaskNodeList.length === this.statemap.length;\r\n    if (customMaskNodeList.length > 0 && customMaskNodeList.length !== this.statemap.length) {\r\n      // further possible to explicitly pass mask index\r\n      console.warn(\"You're trying use custom markup, but count of your immerser masks doesn't equal layers count. Check out documentation https://github.com/dubaua/immerser#custom-markup\");\r\n    }\r\n\r\n    // since custom child wrapped in ignoring pointer and touch events immerser mask, we should explicitly set them on\r\n    utils.forEachNode(customMaskNodeList, customMaskNode => {\r\n      const customChildrenHTMLCollection = customMaskNode.querySelector(this.options.selectorMaskInner).children;\r\n      for (let i = 0; i < customChildrenHTMLCollection.length; i++) {\r\n        utils.bindStyles(customChildrenHTMLCollection[i], { pointerEvents: 'all', touchAction: 'auto' });\r\n      }\r\n    });\r\n\r\n    this.statemap = this.statemap.map((state, stateIndex) => {\r\n      // create or assign existing markup, bind styles\r\n      const maskNode = this.isCustomMarkup ? customMaskNodeList[stateIndex] : document.createElement('div');\r\n      utils.bindStyles(maskNode, maskStyles);\r\n      const maskInnerNode = this.isCustomMarkup\r\n        ? maskNode.querySelector(this.options.selectorMaskInner)\r\n        : document.createElement('div');\r\n      utils.bindStyles(maskInnerNode, maskStyles);\r\n\r\n      // clone solids to innerMask\r\n      utils.forEachNode(this.originalChildrenNodeList, childNode => {\r\n        const clonnedChildNode = childNode.cloneNode(true);\r\n        utils.bindStyles(clonnedChildNode, { pointerEvents: 'all', touchAction: 'auto' });\r\n        clonnedChildNode.immerserClonned = true;\r\n        maskInnerNode.appendChild(clonnedChildNode);\r\n      });\r\n\r\n      // assing class modifiers to clonned solids\r\n      const clonedSolidNodeList = maskInnerNode.querySelectorAll(this.options.selectorSolid);\r\n      utils.forEachNode(clonedSolidNodeList, clonedSolidNode => {\r\n        const solidId = clonedSolidNode.dataset.immerserSolid;\r\n        if (state.solidClassnames && state.solidClassnames.hasOwnProperty(solidId)) {\r\n          clonedSolidNode.classList.add(state.solidClassnames[solidId]);\r\n        }\r\n      });\r\n\r\n      // a11y\r\n      if (stateIndex !== 0) {\r\n        maskNode.setAttribute('aria-hidden', 'true');\r\n      }\r\n\r\n      maskNode.appendChild(maskInnerNode);\r\n      this.immerserNode.appendChild(maskNode);\r\n\r\n      this.immerserMaskNodeArray.push(maskNode);\r\n\r\n      return { ...state, maskNode, maskInnerNode };\r\n    });\r\n\r\n    // detach original solid nodes\r\n    utils.forEachNode(this.originalChildrenNodeList, childNode => {\r\n      this.immerserNode.removeChild(childNode);\r\n    });\r\n  }\r\n\r\n  bind() {\r\n    // check if pager, init pager, create links\r\n    this.pagerNode = document.querySelector(this.options.selectorPager);\r\n    if (this.pagerNode) {\r\n      this.initPager();\r\n      this.createPagerLinks();\r\n    }\r\n\r\n    this.createMasks();\r\n\r\n    if (this.pagerNode) {\r\n      this.initPagerLinks();\r\n    }\r\n\r\n    const synchroHoverNodeList = document.querySelectorAll(this.options.selectorSynchroHover);\r\n    if (synchroHoverNodeList.length) {\r\n      this.initHoverSynchro(synchroHoverNodeList);\r\n    }\r\n\r\n    if (typeof this.options.onBind === 'function') {\r\n      this.options.onBind(this);\r\n    }\r\n\r\n    this.isBound = true;\r\n\r\n    this.draw();\r\n    this.drawPagerLinks(this.reactiveActiveLayer.value);\r\n  }\r\n\r\n  unbind() {\r\n    // detach hover syncro\r\n    this.synchroHoverNodeArray.forEach(synchroHoverNode => {\r\n      synchroHoverNode.removeEventListener('mouseover', synchroHoverNode.__immerserHandleMouseOver);\r\n      synchroHoverNode.removeEventListener('mouseout', synchroHoverNode.__immerserHandleMouseOut);\r\n    });\r\n\r\n    this.statemap.forEach(state => {\r\n      // clear pagerLinkNodeArray\r\n      state.pagerLinkNodeArray = [];\r\n      // clear custom id on layers\r\n      if (state.node.__immerserCustomId) {\r\n        state.node.removeAttribute('id');\r\n      }\r\n    });\r\n\r\n    // restore original children\r\n    utils.forEachNode(this.originalChildrenNodeList, childNode => {\r\n      this.immerserNode.appendChild(childNode);\r\n    });\r\n\r\n    // remove all but custom elements, remove attributes\r\n    this.immerserMaskNodeArray.forEach(immerserMaskNode => {\r\n      // if mask was created\r\n      if (this.isCustomMarkup) {\r\n        // clear mask attributes\r\n        immerserMaskNode.removeAttribute('style');\r\n        immerserMaskNode.removeAttribute('aria-hidden');\r\n        // clear innerMask\r\n        const immerserMaskInnerNode = immerserMaskNode.querySelector(this.options.selectorMaskInner);\r\n        immerserMaskInnerNode.removeAttribute('style');\r\n        // clear clonned solids\r\n        const clonnedSolidNodeList = immerserMaskInnerNode.querySelectorAll(this.options.selectorSolid);\r\n        utils.forEachNode(clonnedSolidNodeList, clonnedSolideNode => {\r\n          if (clonnedSolideNode.immerserClonned) {\r\n            immerserMaskInnerNode.removeChild(clonnedSolideNode);\r\n          }\r\n        });\r\n      } else {\r\n        this.immerserNode.removeChild(immerserMaskNode);\r\n      }\r\n    });\r\n\r\n    this.pagerNode.innerHTML = '';\r\n\r\n    if (typeof this.options.onUnbind === 'function') {\r\n      this.options.onUnbind(this);\r\n    }\r\n\r\n    this.isBound = false;\r\n\r\n    this.reactiveActiveLayer.value = undefined;\r\n  }\r\n\r\n  destroy() {\r\n    this.unbind();\r\n\r\n    window.removeEventListener('scroll', this.onScroll, false);\r\n    window.removeEventListener('resize', this.onResize, false);\r\n\r\n    if (typeof this.options.onDestroy === 'function') {\r\n      this.options.onDestroy(this);\r\n    }\r\n\r\n    this.initState();\r\n  }\r\n\r\n  draw() {\r\n    const { y } = utils.getLastScrollPosition();\r\n    this.statemap.forEach(({ startEnter, enter, startLeave, leave, maskNode, maskInnerNode, top, bottom }, index) => {\r\n      let progress;\r\n\r\n      if (startEnter > y) {\r\n        progress = this.immerserHeight;\r\n      } else if (startEnter <= y && y < enter) {\r\n        progress = enter - y;\r\n      } else if (enter <= y && y < startLeave) {\r\n        progress = 0;\r\n      } else if (startLeave <= y && y < leave) {\r\n        progress = startLeave - y;\r\n      } else if (y >= leave) {\r\n        progress = -this.immerserHeight;\r\n      }\r\n\r\n      maskNode.style.transform = `translateY(${progress}px)`;\r\n      maskInnerNode.style.transform = `translateY(${-progress}px)`;\r\n\r\n      if (this.pagerNode) {\r\n        const pagerScrollActivePoint = y + this.windowHeight * (1 - this.options.pagerThreshold);\r\n        if (top <= pagerScrollActivePoint && pagerScrollActivePoint < bottom) {\r\n          this.reactiveActiveLayer.value = index;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  drawPagerLinks() {\r\n    this.statemap.forEach(({ pagerLinkNodeArray }) => {\r\n      pagerLinkNodeArray.forEach(pagerLinkNode => {\r\n        if (parseInt(pagerLinkNode.dataset.immerserStateIndex, 10) === this.reactiveActiveLayer.value) {\r\n          pagerLinkNode.classList.add(this.options.classnamePagerLinkActive);\r\n        } else {\r\n          pagerLinkNode.classList.remove(this.options.classnamePagerLinkActive);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  drawSynchroHover(synchroHoverId) {\r\n    this.synchroHoverNodeArray.forEach(synchroHoverNode => {\r\n      if (synchroHoverNode.dataset.immerserSynchroHover === synchroHoverId) {\r\n        synchroHoverNode.classList.add('_hover');\r\n      } else {\r\n        synchroHoverNode.classList.remove('_hover');\r\n      }\r\n    });\r\n  }\r\n\r\n  updateHash(stateIndex) {\r\n    const currentState = this.statemap[stateIndex];\r\n    const nextHash = currentState.id;\r\n    // this prevent move to anchor\r\n    currentState.node.removeAttribute('id');\r\n    window.location.hash = nextHash;\r\n    currentState.node.setAttribute('id', nextHash);\r\n  }\r\n\r\n  adjustScroll() {\r\n    const { top, bottom } = this.statemap[this.reactiveActiveLayer.value];\r\n    const { x, y } = utils.getLastScrollPosition();\r\n    const topThreshold = Math.abs(y - top);\r\n    const bottomThreshold = Math.abs(y + this.windowHeight - bottom);\r\n\r\n    if (topThreshold !== 0 && bottomThreshold !== 0) {\r\n      if (topThreshold <= bottomThreshold && topThreshold <= this.options.scrollAdjustThreshold) {\r\n        window.scrollTo(x, top);\r\n      } else if (bottomThreshold <= topThreshold && bottomThreshold <= this.options.scrollAdjustThreshold) {\r\n        window.scrollTo(x, bottom - this.windowHeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleScroll() {\r\n    if (this.isBound) {\r\n      this.draw();\r\n      if (this.options.scrollAdjustThreshold > 0) {\r\n        if (this.scrollTimerId) clearTimeout(this.scrollTimerId);\r\n        this.scrollTimerId = setTimeout(() => {\r\n          this.adjustScroll();\r\n        }, this.options.scrollAdjustDelay);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleResize() {\r\n    if (this.resizeTimerId) window.cancelAnimationFrame(this.resizeTimerId);\r\n    this.resizeTimerId = window.requestAnimationFrame(() => {\r\n      this.setSizes();\r\n      this.draw();\r\n    });\r\n  }\r\n}\r\n"],"names":["const","CLASSNAME_REGEX","classnameValidator","string","test","DEFAULTS","selectorImmerser","selectorLayer","selectorSolid","selectorPager","selectorPagerLink","selectorMask","selectorMaskInner","selectorSynchroHover","DEFAULT_OPTIONS","solidClassnameArray","initial","description","validator","x","Array","isArray","length","fromViewportWidth","pagerThreshold","hasToUpdateHash","scrollAdjustThreshold","scrollAdjustDelay","classnamePager","classnamePagerLink","classnamePagerLinkActive","onInit","onBind","onUnbind","onDestroy","onActiveLayerChange","options","hasOwnProperty","undefined","onChange","internal","callbacks","this","callback","Error","push","value","next","prev","i","bindStyles","node","styles","rule","style","forEachNode","nodeList","let","index","limit","number","min","max","Math","getLastScrollPosition","scrollX","window","document","documentElement","scrollLeft","scrollY","scrollTop","offsetWidth","y","offsetHeight","Immerser","constructor","initState","init","Object","statemap","isBound","isCustomMarkup","immerserNode","pagerNode","originalChildrenNodeList","immerserMaskNodeArray","synchroHoverNodeArray","documentHeight","windowHeight","immerserTop","immerserHeight","resizeTimerId","scrollTimerId","reactiveSynchroHoverId","createObservable","reactiveActiveLayer","reactiveWindowWidth","onResize","onScroll","defaults","context","key","console","warn","utils","querySelector","initStatemap","setSizes","handleScroll","bind","handleResize","addEventListener","querySelectorAll","layerNode","layerIndex","solidClassnames","dataset","immerserLayerConfig","JSON","parse","e","error","id","__immerserCustomId","innerHeight","offsetTop","map","state","top","isFirst","isLast","enter","bottom","leave","nextWindowWidth","unbind","innerWidth","initPager","nextIndex","drawPagerLinks","updateHash","createPagerLinks","classList","add","forEach","pagerLinkNode","createElement","href","immerserStateIndex","immerserSynchroHover","appendChild","pagerLinkNodeArray","initPagerLinks","initHoverSynchro","synchroHoverNodeList","nextId","drawSynchroHover","synchroHoverNode","handleMouseOver","target","__immerserHandleMouseOver","handleMouseOut","__immerserHandleMouseOut","createMasks","maskStyles","customMaskNodeList","customMaskNode","customChildrenHTMLCollection","children","stateIndex","maskNode","maskInnerNode","childNode","clonnedChildNode","cloneNode","immerserClonned","clonedSolidNode","solidId","immerserSolid","setAttribute","removeChild","draw","removeEventListener","removeAttribute","immerserMaskNode","immerserMaskInnerNode","clonnedSolideNode","innerHTML","destroy","ref","progress","startEnter","startLeave","transform","pagerScrollActivePoint","parseInt","remove","synchroHoverId","currentState","nextHash","location","hash","adjustScroll","topThreshold","abs","bottomThreshold","scrollTo","clearTimeout","setTimeout","cancelAnimationFrame","requestAnimationFrame"],"mappings":"aAAAA,IAAMC,EAAkB,uBAExB,SAASC,EAAmBC,SACD,iBAAXA,GAAkC,KAAXA,GAAiBF,EAAgBG,KAAKD,GAG7E,IAAaE,EAAW,CAEtBC,iBAAkB,kBAClBC,cAAe,wBACfC,cAAe,wBACfC,cAAe,wBACfC,kBAAmB,8BACnBC,aAAc,uBACdC,kBAAmB,6BACnBC,qBAAsB,iCAGXC,EAAkB,CAE7BC,oBAAqB,CACnBC,QAAS,GACTC,YAAa,6BACbC,mBAAWC,UAAKC,MAAMC,QAAQF,IAAmB,IAAbA,EAAEG,SAExCC,kBAAmB,CACjBP,QAAS,KACTC,YAAa,mBACbC,mBAAWC,SAAkB,iBAANA,GAAkB,GAAKA,GAAKA,EAAI,GAAM,IAE/DK,eAAgB,CACdR,QAAS,GACTC,YAAa,2BACbC,mBAAWC,SAAkB,iBAANA,GAAkB,GAAKA,GAAKA,GAAK,IAE1DM,gBAAiB,CACfT,SAAS,EACTC,YAAa,UACbC,mBAAWC,SAAkB,kBAANA,IAEzBO,sBAAuB,CACrBV,QAAS,EACTC,YAAa,sCACbC,mBAAWC,SAAkB,iBAANA,GAAkBA,GAAK,IAEhDQ,kBAAmB,CACjBX,QAAS,IACTC,YAAa,wCACbC,mBAAWC,SAAkB,iBAANA,GAAkBA,GAAK,MAEhDS,eAAgB,CACdZ,QAAS,QACTC,YAAa,mCACbC,UAAWhB,GAEb2B,mBAAoB,CAClBb,QAAS,cACTC,YAAa,mCACbC,UAAWhB,GAEb4B,yBAA0B,CACxBd,QAAS,sBACTC,YAAa,mCACbC,UAAWhB,GAEb6B,OAAQ,CACNf,QAAS,KACTC,YAAa,WACbC,mBAAWC,SAAkB,mBAANA,IAEzBa,OAAQ,CACNhB,QAAS,KACTC,YAAa,WACbC,mBAAWC,SAAkB,mBAANA,IAEzBc,SAAU,CACRjB,QAAS,KACTC,YAAa,WACbC,mBAAWC,SAAkB,mBAANA,IAEzBe,UAAW,CACTlB,QAAS,KACTC,YAAa,WACbC,mBAAWC,SAAkB,mBAANA,IAEzBgB,oBAAqB,CACnBnB,QAAS,KACTC,YAAa,WACbC,mBAAWC,SAAkB,mBAANA,OC5EV,SAASiB,GACxB,IAAIpB,EAAUoB,GAAWA,EAAQC,eAAe,WAAaD,EAAQpB,aAAUsB,EAC3EC,EAAWH,GAAWA,EAAQC,eAAe,YAAcD,EAAQG,cAAWD,EAElF,MAAO,CACLE,SAAUxB,EACVyB,UAA+B,mBAAbF,EAA0B,CAACA,GAAY,GAEzDA,eACE,OAAOG,KAAKD,WAGdF,aAAaI,GACX,GAAwB,mBAAbA,EAGT,MAAM,IAAIC,MAAM,mDAFhBF,KAAKD,UAAUI,KAAKF,IAMxBG,YACE,OAAOJ,KAAKF,UAGdM,UAAUC,GACR,GAAIA,IAASL,KAAKF,SAAU,CAC1B,IAAIQ,EAAON,KAAKF,SAChBE,KAAKF,SAAWO,EAChB,IAAK,IAAIE,EAAI,EAAGA,EAAIP,KAAKD,UAAUnB,OAAQ2B,IACzCP,KAAKD,UAAUQ,GAAGP,KAAKF,SAAUQ,OCzCpC,SAASE,EAAWC,EAAMC,OAC1BpD,IAAMqD,KAAQD,EACjBD,EAAKG,MAAMD,GAAQD,EAAOC,GAIvB,SAASE,EAAYC,EAAUb,OAC/Bc,IAAIC,EAAQ,EAAGA,EAAQF,EAASlC,OAAQoC,IAE3Cf,EADaa,EAASE,GACPA,EAAOF,GAI1B,SAAgBG,EAAMC,EAAQC,EAAKC,UAC1BC,KAAKD,IAAIC,KAAKF,IAAID,EAAQE,GAAMD,GAGzC,SAAgBG,QACRC,EAAUC,OAAOD,SAAWE,SAASC,gBAAgBC,WACrDC,EAAUJ,OAAOI,SAAWH,SAASC,gBAAgBG,gBAEpD,CACLpD,EAAGwC,EAAMM,EAAS,EAAGE,SAASC,gBAAgBI,aAC9CC,EAAGd,EAAMW,EAAS,EAAGH,SAASC,gBAAgBM,eCnBnC,IAAMC,EACnBC,SAAYxC,QACLyC,iBACAC,KAAK1C,IAGZyC,YAAAA,0BACOzC,QAAU2C,iBAAK1E,QACf2E,SAAW,QACXC,SAAU,OACVC,gBAAiB,OACjBC,aAAe,UACfC,UAAY,UACZC,yBAA2B,UAC3BC,sBAAwB,QACxBC,sBAAwB,QACxBC,eAAiB,OACjBC,aAAe,OACfC,YAAc,OACdC,eAAiB,OACjBC,cAAgB,UAChBC,cAAgB,UAChBC,uBAAyBC,SACzBC,oBAAsBD,SACtBE,oBAAsBF,SACtBG,SAAW,UACXC,SAAW,MAGlBrB,YAAAA,cAAK1C,IDNP,SAAwCA,EAAcgE,EAAUC,OACzDrG,IAAMsG,oBADqC,IAC9BF,EAAU,OACkBA,EAASE,gDACrDD,EAAQC,GAAOtF,EACXoB,EAAQC,eAAeiE,GAAM,KACzBxD,EAAQV,EAAQkE,GAClBpF,EAAU4B,GACZuD,EAAQC,GAAOxD,EAEfyD,QAAQC,iBACMF,SAAUrF,mBAA4B6B,OAAUA,iCAAoC9B,wECHtGyF,CAA8BrE,EAAStB,EAAiB4B,KAAKN,cACxD+C,aAAehB,SAASuC,cAAchE,KAAKN,QAAQ9B,kBACnDoC,KAAKyC,mBAKLwB,oBACAC,gBAEAT,SAAWzD,KAAKmE,aAAaC,KAAKpE,WAClCwD,SAAWxD,KAAKqE,aAAaD,KAAKpE,MAEvCwB,OAAO8C,iBAAiB,SAAUtE,KAAKyD,UAAU,GACjDjC,OAAO8C,iBAAiB,SAAUtE,KAAKwD,UAAU,GAEd,mBAAxBxD,KAAKN,QAAQL,aACjBK,QAAQL,OAAOW,OAdpB6D,QAAQC,KAAK,sGAkBjBG,YAAAA,qCACwBxC,SAAS8C,iBAAiBvE,KAAKN,QAAQ7B,wBAC3B2G,EAAWC,OACvCC,EAAkB1E,EAAKN,QAAQrB,oBAAoBoG,MACnDD,EAAUG,QAAQC,wBAElBF,EAAkBG,KAAKC,MAAMN,EAAUG,QAAQC,qBAC/C,MAAOG,WACCC,MAAM,4CAA6CD,OAI3DE,EAAKT,EAAUS,GACdA,IAEHT,EAAUS,GADVA,EAAM,oBAAmBR,EAEzBD,EAAUU,oBAAqB,KAG5B5C,SAASnC,KAAK,MACXqE,KACNS,kBACAP,MACK,SACG,OAKdR,YAAAA,oCAEOpB,eAAiBrB,SAASC,gBAAgBM,kBAC1Ce,aAAevB,OAAO2D,iBAGtBnC,YAAchD,KAAKyC,aAAa2C,eAChCnC,eAAiBjD,KAAKyC,aAAaT,kBAGnCM,SAAWtC,KAAKsC,SAAS+C,aAAIC,OAC1BC,EAAMD,EAAM7E,KAAK2E,iBAEhB/C,iBACFiD,OACHC,SAHaA,EAAMD,EAAM7E,KAAKuB,sBAS7BM,SAAWtC,KAAKsC,SAAS+C,aAAKC,EAAOtE,OAClCwE,EAAoB,IAAVxE,EACVyE,EAASzE,IAAUhB,EAAKsC,SAAS1D,OAAS,EAG1C8G,EAAQF,EAAU,EAAIxF,EAAKsC,SAAStB,EAAQ,GAAG2E,OAAS3F,EAAKgD,YAE7D4C,EAAQH,EAASzF,EAAK8C,eAAiB9C,EAAKsC,SAAStB,GAAO2E,OAAS3F,EAAKgD,mBAGzEX,iBACFiD,cALcE,EAAU,EAAIE,EAAQ1F,EAAKiD,qBAO5CyC,aALiBD,EAASzF,EAAK8C,eAAiB8C,EAAQ5F,EAAKiD,qBAO7D2C,WAICrC,oBAAoB1D,kBAAWgG,GAC9BA,GAAmB7F,EAAKN,QAAQb,kBAC7BmB,EAAKuC,WACH6B,OAEEpE,EAAKuC,WACTuD,eAGJvC,oBAAoBnD,MAAQoB,OAAOuE,YAG1CC,YAAAA,qCACO1C,oBAAoBzD,kBAAWoG,GAC7BjG,EAAKuC,YAGL2D,eAAeD,GAGhBjG,EAAKN,QAAQX,mBACVoH,WAAWF,GAI8B,mBAArCjG,EAAKN,QAAQD,uBACjBC,QAAQD,oBAAoBwG,EAAWjG,MAKlDoG,YAAAA,yCACiDpG,KAAKN,oCAC/CgD,UAAU2D,UAAUC,2BAEpBhE,SAASiE,iBAASjB,EAAOtE,OACtBwF,EAAgB/E,SAASgF,cAAc,OAC/BJ,UAAUC,IAAInH,KACduH,KAAQ,IAAGpB,EAAS,GAGlCkB,EAAc7B,QAAQgC,mBAAqB3F,IAG7B2D,QAAQiC,qBAAwB,cAAa5F,IAEtD0B,UAAUmE,YAAYL,GAE3BlB,EAAMwB,mBAAqB,MAI/BC,YAAAA,uCAC4B/G,KAAKyC,aAAa8B,iBAAiBvE,KAAKN,QAAQ1B,4BACrCwI,KAE9BlE,SADckE,EAAc7B,QAAQgC,oBACfG,mBAAmB3G,KAAKqG,MAItDQ,YAAAA,0BAAiBC,mBACV7D,uBAAuBvD,kBAAWqH,KAChCC,iBAAiBD,MAGND,WAAsBG,OAChCC,WAAkBtC,KAEjB3B,uBAAuBhD,MADL2E,EAAEuC,OAAO3C,QAAQiC,wBAGzBtC,iBAAiB,YAAa+C,GAC/CD,EAAiBG,0BAA4BF,MAEvCG,eACCpE,uBAAuBhD,WAAQR,KAErB0E,iBAAiB,WAAYkD,GAC9CJ,EAAiBK,yBAA2BD,IAEvC3E,sBAAsB1C,KAAKiH,MAIpCM,YAAAA,kCACQC,EAAa,UACP,eACL,QACE,SACC,OACF,WACI,eAGPhF,yBAA2B3C,KAAKyC,aAAa8B,iBAAiBvE,KAAKN,QAAQ5B,eAChFiG,EAAiB/D,KAAKyC,aAAc,eAAiB,mBAAqB,aAEpEmF,EAAqB5H,KAAKyC,aAAa8B,iBAAiBvE,KAAKN,QAAQzB,mBACtEuE,eAAiBoF,EAAmBhJ,SAAWoB,KAAKsC,SAAS1D,OAC9DgJ,EAAmBhJ,OAAS,GAAKgJ,EAAmBhJ,SAAWoB,KAAKsC,SAAS1D,QAE/EiF,QAAQC,KAAK,4KAIG8D,WAAoBC,WAC9BC,EAA+BD,EAAe7D,cAAchE,EAAKN,QAAQxB,mBAAmB6J,SACzFxH,EAAI,EAAGA,EAAIuH,EAA6BlJ,OAAQ2B,MACtCuH,EAA6BvH,GAAI,eAAiB,kBAAoB,gBAItF+B,SAAWtC,KAAKsC,SAAS+C,aAAKC,EAAO0C,OAElCC,EAAWjI,EAAKwC,eAAiBoF,EAAmBI,GAAcvG,SAASgF,cAAc,SAC9EwB,EAAUN,OACrBO,EAAgBlI,EAAKwC,eACvByF,EAASjE,cAAchE,EAAKN,QAAQxB,mBACpCuD,SAASgF,cAAc,gBACVyB,EAAeP,KAGd3H,EAAK2C,kCAA0BwF,OACzCC,EAAmBD,EAAUE,WAAU,GAC7CtE,EAAiBqE,EAAkB,eAAiB,kBAAoB,SACxEA,EAAiBE,iBAAkB,EACnCJ,EAAcrB,YAAYuB,OAIAF,EAAc3D,iBAAiBvE,EAAKN,QAAQ5B,wBACjCyK,OAC/BC,EAAUD,EAAgB5D,QAAQ8D,cACpCnD,EAAMZ,iBAAmBY,EAAMZ,gBAAgB/E,eAAe6I,IAChED,EAAgBlC,UAAUC,IAAIhB,EAAMZ,gBAAgB8D,MAKrC,IAAfR,KACOU,aAAa,cAAe,QAGvCT,EAASpB,YAAYqB,KAChBzF,aAAaoE,YAAYoB,KAEzBrF,sBAAsBzC,KAAK8H,GAEzB5F,iBAAKiD,YAAO2C,gBAAUC,QAIblI,KAAK2C,kCAA0BwF,KAC1C1F,aAAakG,YAAYR,MAIlC/D,YAAAA,qBAEO1B,UAAYjB,SAASuC,cAAchE,KAAKN,QAAQ3B,eACjDiC,KAAK0C,iBACFsD,iBACAI,yBAGFsB,cAED1H,KAAK0C,gBACFqE,qBAGDE,EAAuBxF,SAAS8C,iBAAiBvE,KAAKN,QAAQvB,sBAChE8I,EAAqBrI,aAClBoI,iBAAiBC,GAGW,mBAAxBjH,KAAKN,QAAQJ,aACjBI,QAAQJ,OAAOU,WAGjBuC,SAAU,OAEVqG,YACA1C,eAAelG,KAAKsD,oBAAoBlD,QAG/C0F,YAAAA,kCAEOjD,sBAAsB0D,iBAAQa,KAChByB,oBAAoB,YAAazB,EAAiBG,6BAClDsB,oBAAoB,WAAYzB,EAAiBK,iCAG/DnF,SAASiE,iBAAQjB,GAEpBA,EAAMwB,mBAAqB,GAEvBxB,EAAM7E,KAAKyE,sBACPzE,KAAKqI,gBAAgB,UAKb9I,KAAK2C,kCAA0BwF,KAC1C1F,aAAaoE,YAAYsB,UAI3BvF,sBAAsB2D,iBAAQwC,MAE7B/I,EAAKwC,eAAgB,CAEvBuG,EAAiBD,gBAAgB,SACjCC,EAAiBD,gBAAgB,mBAE3BE,EAAwBD,EAAiB/E,cAAchE,EAAKN,QAAQxB,mBAC1E8K,EAAsBF,gBAAgB,WAETE,EAAsBzE,iBAAiBvE,EAAKN,QAAQ5B,wBACzCmL,GAClCA,EAAkBX,iBACpBU,EAAsBL,YAAYM,YAIjCxG,aAAakG,YAAYI,UAI7BrG,UAAUwG,UAAY,GAEU,mBAA1BlJ,KAAKN,QAAQH,eACjBG,QAAQH,SAASS,WAGnBuC,SAAU,OAEVe,oBAAoBlD,WAAQR,GAGnCuJ,YAAAA,wBACOrD,SAELtE,OAAOqH,oBAAoB,SAAU7I,KAAKyD,UAAU,GACpDjC,OAAOqH,oBAAoB,SAAU7I,KAAKwD,UAAU,GAEd,mBAA3BxD,KAAKN,QAAQF,gBACjBE,QAAQF,UAAUQ,WAGpBmC,aAGPyG,YAAAA,6BACgB7E,WACTzB,SAASiE,iBAAS6C,EAAgFpI,OACjGqI,4FAEAC,EAAavH,EACfsH,EAAWrJ,EAAKiD,eACPqG,GAAcvH,GAAKA,EAAI2D,EAChC2D,EAAW3D,EAAQ3D,EACV2D,GAAS3D,GAAKA,EAAIwH,IAChB,EACFA,GAAcxH,GAAKA,EAAI6D,EAChCyD,EAAWE,EAAaxH,EACfA,GAAK6D,IACdyD,GAAYrJ,EAAKiD,2BAGVrC,MAAM4I,UAAa,cAAaH,UAC3BzI,MAAM4I,UAAa,eAAcH,QAE3CrJ,EAAK0C,UAAW,KACZ+G,EAAyB1H,EAAI/B,EAAK+C,cAAgB,EAAI/C,EAAKN,QAAQZ,gBACrEyG,GAAOkE,GAA0BA,EAAyB9D,MACvDrC,oBAAoBlD,MAAQY,OAMzCkF,YAAAA,0CACO5D,SAASiE,iBAAS6C,wBACF7C,iBAAQC,GACrBkD,SAASlD,EAAc7B,QAAQgC,mBAAoB,MAAQ3G,EAAKsD,oBAAoBlD,MACtFoG,EAAcH,UAAUC,IAAItG,EAAKN,QAAQN,0BAEzCoH,EAAcH,UAAUsD,OAAO3J,EAAKN,QAAQN,+BAMpD+H,YAAAA,0BAAiByC,QACV/G,sBAAsB0D,iBAAQa,GAC7BA,EAAiBzC,QAAQiC,uBAAyBgD,IACnCvD,UAAUC,IAAI,YAEdD,UAAUsD,OAAO,aAKxCxD,YAAAA,oBAAW6B,OACH6B,EAAe7J,KAAKsC,SAAS0F,GAC7B8B,EAAWD,EAAa5E,KAEjBxE,KAAKqI,gBAAgB,MAClCtH,OAAOuI,SAASC,KAAOF,IACVrJ,KAAKiI,aAAa,KAAMoB,IAGvCG,YAAAA,8BAC0BjK,KAAKsC,SAAStC,KAAKsD,oBAAoBlD,4BAC9C2D,gBACXmG,EAAe7I,KAAK8I,IAAIpI,EAAIwD,GAC5B6E,EAAkB/I,KAAK8I,IAAIpI,EAAI/B,KAAK+C,aAAe4C,GAEpC,IAAjBuE,GAA0C,IAApBE,IACpBF,GAAgBE,GAAmBF,GAAgBlK,KAAKN,QAAQV,6BAC3DqL,SAAS5L,EAAG8G,GACV6E,GAAmBF,GAAgBE,GAAmBpK,KAAKN,QAAQV,uBAC5EwC,OAAO6I,SAAS5L,EAAGkH,EAAS3F,KAAK+C,gBAKvCoB,YAAAA,mCACMnE,KAAKuC,eACFqG,OACD5I,KAAKN,QAAQV,sBAAwB,IACnCgB,KAAKmD,eAAemH,aAAatK,KAAKmD,oBACrCA,cAAgBoH,wBACdN,gBACJjK,KAAKN,QAAQT,sBAKtBoF,YAAAA,mCACMrE,KAAKkD,eAAe1B,OAAOgJ,qBAAqBxK,KAAKkD,oBACpDA,cAAgB1B,OAAOiJ,mCACrBvG,aACA0E"}